/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AssemblyClient.Client;
using AssemblyClient.Api;
using AssemblyClient.Model;

namespace AssemblyClient.Test
{
    /// <summary>
    ///  Class for testing RegistrationGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RegistrationGroupsApiTests
    {
        private RegistrationGroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RegistrationGroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RegistrationGroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RegistrationGroupsApi
            //Assert.IsInstanceOfType(typeof(RegistrationGroupsApi), instance, "instance is a RegistrationGroupsApi");
        }

        
        /// <summary>
        /// Test GetRegistrationGroups
        /// </summary>
        [Test]
        public void GetRegistrationGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string yearCode = null;
            //string date = null;
            //int? academicYearId = null;
            //int? page = null;
            //int? perPage = null;
            //string ifModifiedSince = null;
            //var response = instance.GetRegistrationGroups(yearCode, date, academicYearId, page, perPage, ifModifiedSince);
            //Assert.IsInstanceOf<RegistrationGroupList> (response, "response is RegistrationGroupList");
        }
        
        /// <summary>
        /// Test GetRegistrationGroupsGroupId
        /// </summary>
        [Test]
        public void GetRegistrationGroupsGroupIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string date = null;
            //int? academicYearId = null;
            //string ifModifiedSince = null;
            //var response = instance.GetRegistrationGroupsGroupId(groupId, date, academicYearId, ifModifiedSince);
            //Assert.IsInstanceOf<RegistrationGroup> (response, "response is RegistrationGroup");
        }
        
        /// <summary>
        /// Test GetRegistrationGroupsGroupIdStudents
        /// </summary>
        [Test]
        public void GetRegistrationGroupsGroupIdStudentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string yearCode = null;
            //string date = null;
            //int? academicYearId = null;
            //bool? demographics = null;
            //bool? care = null;
            //int? page = null;
            //int? perPage = null;
            //string ifModifiedSince = null;
            //var response = instance.GetRegistrationGroupsGroupIdStudents(groupId, yearCode, date, academicYearId, demographics, care, page, perPage, ifModifiedSince);
            //Assert.IsInstanceOf<StudentList> (response, "response is StudentList");
        }
        
    }

}
