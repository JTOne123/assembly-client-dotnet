/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using AssemblyClient.Client;
using AssemblyClient.Api;
using AssemblyClient.Model;

namespace AssemblyClient.Test
{
    /// <summary>
    ///  Class for testing TeachingGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TeachingGroupsApiTests
    {
        private TeachingGroupsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TeachingGroupsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TeachingGroupsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TeachingGroupsApi
            //Assert.IsInstanceOfType(typeof(TeachingGroupsApi), instance, "instance is a TeachingGroupsApi");
        }

        
        /// <summary>
        /// Test TeachingGroup
        /// </summary>
        [Test]
        public void TeachingGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //DateTime? date = null;
            //int? academicYearId = null;
            //var response = instance.TeachingGroup(id, date, academicYearId);
            //Assert.IsInstanceOf<TeachingGroup> (response, "response is TeachingGroup");
        }
        
        /// <summary>
        /// Test TeachingGroupStudents
        /// </summary>
        [Test]
        public void TeachingGroupStudentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //DateTime? ifModifiedSince = null;
            //bool? demographics = null;
            //bool? contacts = null;
            //bool? senNeeds = null;
            //bool? addresses = null;
            //bool? care = null;
            //bool? everInCare = null;
            //bool? languages = null;
            //bool? photo = null;
            //var response = instance.TeachingGroupStudents(id, ifModifiedSince, demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo);
            //Assert.IsInstanceOf<StudentList> (response, "response is StudentList");
        }
        
        /// <summary>
        /// Test TeachingGroups
        /// </summary>
        [Test]
        public void TeachingGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? ifModifiedSince = null;
            //string subjectCode = null;
            //int? yearCode = null;
            //DateTime? date = null;
            //int? academicYearId = null;
            //int? perPage = null;
            //int? page = null;
            //var response = instance.TeachingGroups(ifModifiedSince, subjectCode, yearCode, date, academicYearId, perPage, page);
            //Assert.IsInstanceOf<TeachingGroupList> (response, "response is TeachingGroupList");
        }
        
    }

}
