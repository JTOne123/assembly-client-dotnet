/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using assembly-client-dotnet.Client;
using assembly-client-dotnet.Api;
using assembly-client-dotnet.Model;

namespace assembly-client-dotnet.Test
{
    /// <summary>
    ///  Class for testing AssessmentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssessmentsApiTests
    {
        private AssessmentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssessmentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssessmentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssessmentsApi
            //Assert.IsInstanceOfType(typeof(AssessmentsApi), instance, "instance is a AssessmentsApi");
        }

        
        /// <summary>
        /// Test AssessmentPoints
        /// </summary>
        [Test]
        public void AssessmentPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string yearCode = null;
            //string type = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.AssessmentPoints(yearCode, type, page, perPage);
            //Assert.IsInstanceOf<AssessmentPointList> (response, "response is AssessmentPointList");
        }
        
        /// <summary>
        /// Test AssessmentPointsAssessmentPointRank
        /// </summary>
        [Test]
        public void AssessmentPointsAssessmentPointRankTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assessmentPointRank = null;
            //var response = instance.AssessmentPointsAssessmentPointRank(assessmentPointRank);
            //Assert.IsInstanceOf<AssessmentPoint> (response, "response is AssessmentPoint");
        }
        
        /// <summary>
        /// Test AssessmentPointsAssessmentPointRankResults
        /// </summary>
        [Test]
        public void AssessmentPointsAssessmentPointRankResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assessmentPointRank = null;
            //string students = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.AssessmentPointsAssessmentPointRankResults(assessmentPointRank, students, page, perPage);
            //Assert.IsInstanceOf<ResultList> (response, "response is ResultList");
        }
        
        /// <summary>
        /// Test Assessments
        /// </summary>
        [Test]
        public void AssessmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? misMappings = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Assessments(misMappings, page, perPage);
            //Assert.IsInstanceOf<AssessmentList> (response, "response is AssessmentList");
        }
        
        /// <summary>
        /// Test AssessmentsAssessmentId
        /// </summary>
        [Test]
        public void AssessmentsAssessmentIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assessmentId = null;
            //var response = instance.AssessmentsAssessmentId(assessmentId);
            //Assert.IsInstanceOf<Assessment> (response, "response is Assessment");
        }
        
        /// <summary>
        /// Test AssessmentsAssessmentIdGradeSet
        /// </summary>
        [Test]
        public void AssessmentsAssessmentIdGradeSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assessmentId = null;
            //var response = instance.AssessmentsAssessmentIdGradeSet(assessmentId);
            //Assert.IsInstanceOf<Gradeset> (response, "response is Gradeset");
        }
        
        /// <summary>
        /// Test AssessmentsAssessmentIdResults
        /// </summary>
        [Test]
        public void AssessmentsAssessmentIdResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assessmentId = null;
            //string students = null;
            //var response = instance.AssessmentsAssessmentIdResults(assessmentId, students);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
        /// <summary>
        /// Test FacetFacetId
        /// </summary>
        [Test]
        public void FacetFacetIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string facetId = null;
            //var response = instance.FacetFacetId(facetId);
            //Assert.IsInstanceOf<Facet> (response, "response is Facet");
        }
        
        /// <summary>
        /// Test Facets
        /// </summary>
        [Test]
        public void FacetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.Facets(page, perPage);
            //Assert.IsInstanceOf<FacetList> (response, "response is FacetList");
        }
        
        /// <summary>
        /// Test PatchResults
        /// </summary>
        [Test]
        public void PatchResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateMultipleResultResponse updateMultipleResultPayload = null;
            //var response = instance.PatchResults(updateMultipleResultPayload);
            //Assert.IsInstanceOf<UpdateMultipleResultResponse> (response, "response is UpdateMultipleResultResponse");
        }
        
        /// <summary>
        /// Test PatchResultsResultId
        /// </summary>
        [Test]
        public void PatchResultsResultIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string resultId = null;
            //Result updateResultPayload = null;
            //var response = instance.PatchResultsResultId(resultId, updateResultPayload);
            //Assert.IsInstanceOf<Result> (response, "response is Result");
        }
        
    }

}
