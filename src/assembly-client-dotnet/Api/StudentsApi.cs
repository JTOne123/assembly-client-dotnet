/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using assembly-client-dotnet.Client;
using assembly-client-dotnet.Model;

namespace assembly-client-dotnet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStudentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided access_token.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>StudentList</returns>
        StudentList Students (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided access_token.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        ApiResponse<StudentList> StudentsWithHttpInfo (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Student</returns>
        Student StudentsStudentId (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of Student</returns>
        ApiResponse<Student> StudentsStudentIdWithHttpInfo (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided access_token.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of StudentList</returns>
        System.Threading.Tasks.Task<StudentList> StudentsAsync (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided access_token.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentList>> StudentsAsyncWithHttpInfo (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of Student</returns>
        System.Threading.Tasks.Task<Student> StudentsStudentIdAsync (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (Student)</returns>
        System.Threading.Tasks.Task<ApiResponse<Student>> StudentsStudentIdAsyncWithHttpInfo (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StudentsApi : IStudentsApi
    {
        private assembly-client-dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentsApi(String basePath)
        {
            this.Configuration = new assembly-client-dotnet.Client.Configuration { BasePath = basePath };

            ExceptionFactory = assembly-client-dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StudentsApi(assembly-client-dotnet.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = assembly-client-dotnet.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = assembly-client-dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public assembly-client-dotnet.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public assembly-client-dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a list of students for the school associated with the provided access_token.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>StudentList</returns>
        public StudentList Students (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<StudentList> localVarResponse = StudentsWithHttpInfo(yearCode, students, date, demographics, contacts, senNeeds, addresses, care, languages, page, perPage, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of students for the school associated with the provided access_token.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        public ApiResponse< StudentList > StudentsWithHttpInfo (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Students", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        ///  Returns a list of students for the school associated with the provided access_token.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of StudentList</returns>
        public async System.Threading.Tasks.Task<StudentList> StudentsAsync (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<StudentList> localVarResponse = await StudentsAsyncWithHttpInfo(yearCode, students, date, demographics, contacts, senNeeds, addresses, care, languages, page, perPage, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of students for the school associated with the provided access_token.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentList>> StudentsAsyncWithHttpInfo (string yearCode = null, string students = null, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Students", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        ///  Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Student</returns>
        public Student StudentsStudentId (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null)
        {
             ApiResponse<Student> localVarResponse = StudentsStudentIdWithHttpInfo(studentId, date, demographics, contacts, senNeeds, addresses, care, languages, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of Student</returns>
        public ApiResponse< Student > StudentsStudentIdWithHttpInfo (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StudentsApi->StudentsStudentId");

            var localVarPath = "/students/{student_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarPathParams.Add("student_id", this.Configuration.ApiClient.ParameterToString(studentId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentsStudentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Student>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Student) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Student)));
        }

        /// <summary>
        ///  Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of Student</returns>
        public async System.Threading.Tasks.Task<Student> StudentsStudentIdAsync (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null)
        {
             ApiResponse<Student> localVarResponse = await StudentsStudentIdAsyncWithHttpInfo(studentId, date, demographics, contacts, senNeeds, addresses, care, languages, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns an individual student record for the given ID. Note: the response shown includes student demographics, contacts, student SEN needs, student addresses and student care data but these will only be present if you have permission to access it and pass demographics&#x3D;true, contacts&#x3D;true, sen_needs&#x3D;true, addresses&#x3D;true and care&#x3D;true respectively
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="studentId">ID of the Student as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="demographics">Return demographic information along with the person (requires appropriate scope) (optional, default to false)</param>
        /// <param name="contacts">Return contact information along with this object (optional, default to false)</param>
        /// <param name="senNeeds">Return Special Educational Need information along with this object (optional, default to false)</param>
        /// <param name="addresses">Return address information along with this object (optional, default to false)</param>
        /// <param name="care">Return care information along with this object, depends on inclusion of demographics (optional, default to false)</param>
        /// <param name="languages">Return language information along with this object (optional, default to false)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (Student)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Student>> StudentsStudentIdAsyncWithHttpInfo (string studentId, string date = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? languages = null, string ifModifiedSince = null)
        {
            // verify the required parameter 'studentId' is set
            if (studentId == null)
                throw new ApiException(400, "Missing required parameter 'studentId' when calling StudentsApi->StudentsStudentId");

            var localVarPath = "/students/{student_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (studentId != null) localVarPathParams.Add("student_id", this.Configuration.ApiClient.ParameterToString(studentId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StudentsStudentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Student>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Student) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Student)));
        }

    }
}
