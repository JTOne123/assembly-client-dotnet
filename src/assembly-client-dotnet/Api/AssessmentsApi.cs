/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using assembly-client-dotnet.Client;
using assembly-client-dotnet.Model;

namespace assembly-client-dotnet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssessmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>AssessmentPointList</returns>
        AssessmentPointList AssessmentPoints (string yearCode = null, string type = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of AssessmentPointList</returns>
        ApiResponse<AssessmentPointList> AssessmentPointsWithHttpInfo (string yearCode = null, string type = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment point for the given rank.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>AssessmentPoint</returns>
        AssessmentPoint AssessmentPointsAssessmentPointRank (string assessmentPointRank);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment point for the given rank.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>ApiResponse of AssessmentPoint</returns>
        ApiResponse<AssessmentPoint> AssessmentPointsAssessmentPointRankWithHttpInfo (string assessmentPointRank);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_point_rank and students.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ResultList</returns>
        ResultList AssessmentPointsAssessmentPointRankResults (string assessmentPointRank, string students = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_point_rank and students.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ResultList</returns>
        ApiResponse<ResultList> AssessmentPointsAssessmentPointRankResultsWithHttpInfo (string assessmentPointRank, string students = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment objects.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>AssessmentList</returns>
        AssessmentList Assessments (bool? misMappings = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment objects.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of AssessmentList</returns>
        ApiResponse<AssessmentList> AssessmentsWithHttpInfo (bool? misMappings = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Assessment</returns>
        Assessment AssessmentsAssessmentId (string assessmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>ApiResponse of Assessment</returns>
        ApiResponse<Assessment> AssessmentsAssessmentIdWithHttpInfo (string assessmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Gradeset</returns>
        Gradeset AssessmentsAssessmentIdGradeSet (string assessmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>ApiResponse of Gradeset</returns>
        ApiResponse<Gradeset> AssessmentsAssessmentIdGradeSetWithHttpInfo (string assessmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Result</returns>
        Result AssessmentsAssessmentIdResults (string assessmentId, string students = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>ApiResponse of Result</returns>
        ApiResponse<Result> AssessmentsAssessmentIdResultsWithHttpInfo (string assessmentId, string students = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single facet for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Facet</returns>
        Facet FacetFacetId (string facetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single facet for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>ApiResponse of Facet</returns>
        ApiResponse<Facet> FacetFacetIdWithHttpInfo (string facetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>FacetList</returns>
        FacetList Facets (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of FacetList</returns>
        ApiResponse<FacetList> FacetsWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>UpdateMultipleResultResponse</returns>
        UpdateMultipleResultResponse PatchResults (UpdateMultipleResultResponse updateMultipleResultPayload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>ApiResponse of UpdateMultipleResultResponse</returns>
        ApiResponse<UpdateMultipleResultResponse> PatchResultsWithHttpInfo (UpdateMultipleResultResponse updateMultipleResultPayload = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Result</returns>
        Result PatchResultsResultId (string resultId, Result updateResultPayload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>ApiResponse of Result</returns>
        ApiResponse<Result> PatchResultsResultIdWithHttpInfo (string resultId, Result updateResultPayload = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of AssessmentPointList</returns>
        System.Threading.Tasks.Task<AssessmentPointList> AssessmentPointsAsync (string yearCode = null, string type = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (AssessmentPointList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssessmentPointList>> AssessmentPointsAsyncWithHttpInfo (string yearCode = null, string type = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment point for the given rank.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>Task of AssessmentPoint</returns>
        System.Threading.Tasks.Task<AssessmentPoint> AssessmentPointsAssessmentPointRankAsync (string assessmentPointRank);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment point for the given rank.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>Task of ApiResponse (AssessmentPoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssessmentPoint>> AssessmentPointsAssessmentPointRankAsyncWithHttpInfo (string assessmentPointRank);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_point_rank and students.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ResultList</returns>
        System.Threading.Tasks.Task<ResultList> AssessmentPointsAssessmentPointRankResultsAsync (string assessmentPointRank, string students = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_point_rank and students.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (ResultList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultList>> AssessmentPointsAssessmentPointRankResultsAsyncWithHttpInfo (string assessmentPointRank, string students = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment objects.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of AssessmentList</returns>
        System.Threading.Tasks.Task<AssessmentList> AssessmentsAsync (bool? misMappings = null, int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of assessment objects.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (AssessmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssessmentList>> AssessmentsAsyncWithHttpInfo (bool? misMappings = null, int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of Assessment</returns>
        System.Threading.Tasks.Task<Assessment> AssessmentsAssessmentIdAsync (string assessmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single assessment for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of ApiResponse (Assessment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assessment>> AssessmentsAssessmentIdAsyncWithHttpInfo (string assessmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of Gradeset</returns>
        System.Threading.Tasks.Task<Gradeset> AssessmentsAssessmentIdGradeSetAsync (string assessmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of ApiResponse (Gradeset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gradeset>> AssessmentsAssessmentIdGradeSetAsyncWithHttpInfo (string assessmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Task of Result</returns>
        System.Threading.Tasks.Task<Result> AssessmentsAssessmentIdResultsAsync (string assessmentId, string students = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result>> AssessmentsAssessmentIdResultsAsyncWithHttpInfo (string assessmentId, string students = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single facet for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Task of Facet</returns>
        System.Threading.Tasks.Task<Facet> FacetFacetIdAsync (string facetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single facet for the given ID.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Task of ApiResponse (Facet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Facet>> FacetFacetIdAsyncWithHttpInfo (string facetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of FacetList</returns>
        System.Threading.Tasks.Task<FacetList> FacetsAsync (int? page = null, int? perPage = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (FacetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FacetList>> FacetsAsyncWithHttpInfo (int? page = null, int? perPage = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>Task of UpdateMultipleResultResponse</returns>
        System.Threading.Tasks.Task<UpdateMultipleResultResponse> PatchResultsAsync (UpdateMultipleResultResponse updateMultipleResultPayload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>Task of ApiResponse (UpdateMultipleResultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateMultipleResultResponse>> PatchResultsAsyncWithHttpInfo (UpdateMultipleResultResponse updateMultipleResultPayload = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Task of Result</returns>
        System.Threading.Tasks.Task<Result> PatchResultsResultIdAsync (string resultId, Result updateResultPayload = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </remarks>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        System.Threading.Tasks.Task<ApiResponse<Result>> PatchResultsResultIdAsyncWithHttpInfo (string resultId, Result updateResultPayload = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssessmentsApi : IAssessmentsApi
    {
        private assembly-client-dotnet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssessmentsApi(String basePath)
        {
            this.Configuration = new assembly-client-dotnet.Client.Configuration { BasePath = basePath };

            ExceptionFactory = assembly-client-dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssessmentsApi(assembly-client-dotnet.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = assembly-client-dotnet.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = assembly-client-dotnet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public assembly-client-dotnet.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public assembly-client-dotnet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>AssessmentPointList</returns>
        public AssessmentPointList AssessmentPoints (string yearCode = null, string type = null, int? page = null, int? perPage = null)
        {
             ApiResponse<AssessmentPointList> localVarResponse = AssessmentPointsWithHttpInfo(yearCode, type, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of AssessmentPointList</returns>
        public ApiResponse< AssessmentPointList > AssessmentPointsWithHttpInfo (string yearCode = null, string type = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/assessment_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentPointList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentPointList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentPointList)));
        }

        /// <summary>
        ///  Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of AssessmentPointList</returns>
        public async System.Threading.Tasks.Task<AssessmentPointList> AssessmentPointsAsync (string yearCode = null, string type = null, int? page = null, int? perPage = null)
        {
             ApiResponse<AssessmentPointList> localVarResponse = await AssessmentPointsAsyncWithHttpInfo(yearCode, type, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of assessment points. An assessment_point object represents a point in the school key stage, year, term or half-term that results can be attached to. When sending results back to the Platform, the &#x60;assessment_point_rank&#x60; should be used - this will remain constant across all environments.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="type">Filter by assessment point type (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (AssessmentPointList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssessmentPointList>> AssessmentPointsAsyncWithHttpInfo (string yearCode = null, string type = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/assessment_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentPointList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentPointList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentPointList)));
        }

        /// <summary>
        ///  Returns a single assessment point for the given rank.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>AssessmentPoint</returns>
        public AssessmentPoint AssessmentPointsAssessmentPointRank (string assessmentPointRank)
        {
             ApiResponse<AssessmentPoint> localVarResponse = AssessmentPointsAssessmentPointRankWithHttpInfo(assessmentPointRank);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single assessment point for the given rank.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>ApiResponse of AssessmentPoint</returns>
        public ApiResponse< AssessmentPoint > AssessmentPointsAssessmentPointRankWithHttpInfo (string assessmentPointRank)
        {
            // verify the required parameter 'assessmentPointRank' is set
            if (assessmentPointRank == null)
                throw new ApiException(400, "Missing required parameter 'assessmentPointRank' when calling AssessmentsApi->AssessmentPointsAssessmentPointRank");

            var localVarPath = "/assessment_points/{assessment_point_rank}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentPointRank != null) localVarPathParams.Add("assessment_point_rank", this.Configuration.ApiClient.ParameterToString(assessmentPointRank)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPointsAssessmentPointRank", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentPoint)));
        }

        /// <summary>
        ///  Returns a single assessment point for the given rank.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>Task of AssessmentPoint</returns>
        public async System.Threading.Tasks.Task<AssessmentPoint> AssessmentPointsAssessmentPointRankAsync (string assessmentPointRank)
        {
             ApiResponse<AssessmentPoint> localVarResponse = await AssessmentPointsAssessmentPointRankAsyncWithHttpInfo(assessmentPointRank);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single assessment point for the given rank.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <returns>Task of ApiResponse (AssessmentPoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssessmentPoint>> AssessmentPointsAssessmentPointRankAsyncWithHttpInfo (string assessmentPointRank)
        {
            // verify the required parameter 'assessmentPointRank' is set
            if (assessmentPointRank == null)
                throw new ApiException(400, "Missing required parameter 'assessmentPointRank' when calling AssessmentsApi->AssessmentPointsAssessmentPointRank");

            var localVarPath = "/assessment_points/{assessment_point_rank}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentPointRank != null) localVarPathParams.Add("assessment_point_rank", this.Configuration.ApiClient.ParameterToString(assessmentPointRank)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPointsAssessmentPointRank", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentPoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentPoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentPoint)));
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_point_rank and students.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ResultList</returns>
        public ResultList AssessmentPointsAssessmentPointRankResults (string assessmentPointRank, string students = null, int? page = null, int? perPage = null)
        {
             ApiResponse<ResultList> localVarResponse = AssessmentPointsAssessmentPointRankResultsWithHttpInfo(assessmentPointRank, students, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_point_rank and students.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of ResultList</returns>
        public ApiResponse< ResultList > AssessmentPointsAssessmentPointRankResultsWithHttpInfo (string assessmentPointRank, string students = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'assessmentPointRank' is set
            if (assessmentPointRank == null)
                throw new ApiException(400, "Missing required parameter 'assessmentPointRank' when calling AssessmentsApi->AssessmentPointsAssessmentPointRankResults");

            var localVarPath = "/assessment_points/{assessment_point_rank}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentPointRank != null) localVarPathParams.Add("assessment_point_rank", this.Configuration.ApiClient.ParameterToString(assessmentPointRank)); // path parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPointsAssessmentPointRankResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultList)));
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_point_rank and students.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ResultList</returns>
        public async System.Threading.Tasks.Task<ResultList> AssessmentPointsAssessmentPointRankResultsAsync (string assessmentPointRank, string students = null, int? page = null, int? perPage = null)
        {
             ApiResponse<ResultList> localVarResponse = await AssessmentPointsAssessmentPointRankResultsAsyncWithHttpInfo(assessmentPointRank, students, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of results for the given assessment_point_rank and students.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentPointRank">The rank of the assessment point as an Integer</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (ResultList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultList>> AssessmentPointsAssessmentPointRankResultsAsyncWithHttpInfo (string assessmentPointRank, string students = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'assessmentPointRank' is set
            if (assessmentPointRank == null)
                throw new ApiException(400, "Missing required parameter 'assessmentPointRank' when calling AssessmentsApi->AssessmentPointsAssessmentPointRankResults");

            var localVarPath = "/assessment_points/{assessment_point_rank}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentPointRank != null) localVarPathParams.Add("assessment_point_rank", this.Configuration.ApiClient.ParameterToString(assessmentPointRank)); // path parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentPointsAssessmentPointRankResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultList)));
        }

        /// <summary>
        ///  Returns a list of assessment objects.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>AssessmentList</returns>
        public AssessmentList Assessments (bool? misMappings = null, int? page = null, int? perPage = null)
        {
             ApiResponse<AssessmentList> localVarResponse = AssessmentsWithHttpInfo(misMappings, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of assessment objects.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of AssessmentList</returns>
        public ApiResponse< AssessmentList > AssessmentsWithHttpInfo (bool? misMappings = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/assessments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (misMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mis_mappings", misMappings)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Assessments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentList)));
        }

        /// <summary>
        ///  Returns a list of assessment objects.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of AssessmentList</returns>
        public async System.Threading.Tasks.Task<AssessmentList> AssessmentsAsync (bool? misMappings = null, int? page = null, int? perPage = null)
        {
             ApiResponse<AssessmentList> localVarResponse = await AssessmentsAsyncWithHttpInfo(misMappings, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of assessment objects.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="misMappings">Includes the names of any MIS components to this object (optional, default to false)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (AssessmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssessmentList>> AssessmentsAsyncWithHttpInfo (bool? misMappings = null, int? page = null, int? perPage = null)
        {

            var localVarPath = "/assessments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (misMappings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mis_mappings", misMappings)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Assessments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssessmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AssessmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssessmentList)));
        }

        /// <summary>
        ///  Returns a single assessment for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Assessment</returns>
        public Assessment AssessmentsAssessmentId (string assessmentId)
        {
             ApiResponse<Assessment> localVarResponse = AssessmentsAssessmentIdWithHttpInfo(assessmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single assessment for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>ApiResponse of Assessment</returns>
        public ApiResponse< Assessment > AssessmentsAssessmentIdWithHttpInfo (string assessmentId)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentId");

            var localVarPath = "/assessments/{assessment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Assessment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Assessment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Assessment)));
        }

        /// <summary>
        ///  Returns a single assessment for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of Assessment</returns>
        public async System.Threading.Tasks.Task<Assessment> AssessmentsAssessmentIdAsync (string assessmentId)
        {
             ApiResponse<Assessment> localVarResponse = await AssessmentsAssessmentIdAsyncWithHttpInfo(assessmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single assessment for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of ApiResponse (Assessment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Assessment>> AssessmentsAssessmentIdAsyncWithHttpInfo (string assessmentId)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentId");

            var localVarPath = "/assessments/{assessment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Assessment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Assessment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Assessment)));
        }

        /// <summary>
        ///  Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Gradeset</returns>
        public Gradeset AssessmentsAssessmentIdGradeSet (string assessmentId)
        {
             ApiResponse<Gradeset> localVarResponse = AssessmentsAssessmentIdGradeSetWithHttpInfo(assessmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>ApiResponse of Gradeset</returns>
        public ApiResponse< Gradeset > AssessmentsAssessmentIdGradeSetWithHttpInfo (string assessmentId)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentIdGradeSet");

            var localVarPath = "/assessments/{assessment_id}/grade_set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentIdGradeSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gradeset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gradeset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gradeset)));
        }

        /// <summary>
        ///  Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of Gradeset</returns>
        public async System.Threading.Tasks.Task<Gradeset> AssessmentsAssessmentIdGradeSetAsync (string assessmentId)
        {
             ApiResponse<Gradeset> localVarResponse = await AssessmentsAssessmentIdGradeSetAsyncWithHttpInfo(assessmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a gradeset (an acceptable list of values) for the assessment identified by the assessment_id. Grades should be written back to the Platform using the grade_id.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <returns>Task of ApiResponse (Gradeset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gradeset>> AssessmentsAssessmentIdGradeSetAsyncWithHttpInfo (string assessmentId)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentIdGradeSet");

            var localVarPath = "/assessments/{assessment_id}/grade_set";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentIdGradeSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gradeset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gradeset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gradeset)));
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Result</returns>
        public Result AssessmentsAssessmentIdResults (string assessmentId, string students = null)
        {
             ApiResponse<Result> localVarResponse = AssessmentsAssessmentIdResultsWithHttpInfo(assessmentId, students);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>ApiResponse of Result</returns>
        public ApiResponse< Result > AssessmentsAssessmentIdResultsWithHttpInfo (string assessmentId, string students = null)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentIdResults");

            var localVarPath = "/assessments/{assessment_id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentIdResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        ///  Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Task of Result</returns>
        public async System.Threading.Tasks.Task<Result> AssessmentsAssessmentIdResultsAsync (string assessmentId, string students = null)
        {
             ApiResponse<Result> localVarResponse = await AssessmentsAssessmentIdResultsAsyncWithHttpInfo(assessmentId, students);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of results for the given assessment_id and students. For a full list of national assessment data (Key stage 1 and 2 SATs results) available on the Platform, please see this support article.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assessmentId">ID of the assessment as an Integer.</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Result>> AssessmentsAssessmentIdResultsAsyncWithHttpInfo (string assessmentId, string students = null)
        {
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsApi->AssessmentsAssessmentIdResults");

            var localVarPath = "/assessments/{assessment_id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessment_id", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "students", students)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssessmentsAssessmentIdResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        ///  Returns a single facet for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Facet</returns>
        public Facet FacetFacetId (string facetId)
        {
             ApiResponse<Facet> localVarResponse = FacetFacetIdWithHttpInfo(facetId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single facet for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>ApiResponse of Facet</returns>
        public ApiResponse< Facet > FacetFacetIdWithHttpInfo (string facetId)
        {
            // verify the required parameter 'facetId' is set
            if (facetId == null)
                throw new ApiException(400, "Missing required parameter 'facetId' when calling AssessmentsApi->FacetFacetId");

            var localVarPath = "/facet/{facet_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (facetId != null) localVarPathParams.Add("facet_id", this.Configuration.ApiClient.ParameterToString(facetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FacetFacetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Facet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Facet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Facet)));
        }

        /// <summary>
        ///  Returns a single facet for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Task of Facet</returns>
        public async System.Threading.Tasks.Task<Facet> FacetFacetIdAsync (string facetId)
        {
             ApiResponse<Facet> localVarResponse = await FacetFacetIdAsyncWithHttpInfo(facetId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single facet for the given ID.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="facetId">ID of the facet as an Integer.</param>
        /// <returns>Task of ApiResponse (Facet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Facet>> FacetFacetIdAsyncWithHttpInfo (string facetId)
        {
            // verify the required parameter 'facetId' is set
            if (facetId == null)
                throw new ApiException(400, "Missing required parameter 'facetId' when calling AssessmentsApi->FacetFacetId");

            var localVarPath = "/facet/{facet_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (facetId != null) localVarPathParams.Add("facet_id", this.Configuration.ApiClient.ParameterToString(facetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FacetFacetId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Facet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Facet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Facet)));
        }

        /// <summary>
        ///  Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>FacetList</returns>
        public FacetList Facets (int? page = null, int? perPage = null)
        {
             ApiResponse<FacetList> localVarResponse = FacetsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>ApiResponse of FacetList</returns>
        public ApiResponse< FacetList > FacetsWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/facets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Facets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FacetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FacetList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FacetList)));
        }

        /// <summary>
        ///  Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of FacetList</returns>
        public async System.Threading.Tasks.Task<FacetList> FacetsAsync (int? page = null, int? perPage = null)
        {
             ApiResponse<FacetList> localVarResponse = await FacetsAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of facets. The facet is used to reflect a different type of grade and allows 2 grades of the same assessment to be compared.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (FacetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FacetList>> FacetsAsyncWithHttpInfo (int? page = null, int? perPage = null)
        {

            var localVarPath = "/facets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Facets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FacetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FacetList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FacetList)));
        }

        /// <summary>
        ///  Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>UpdateMultipleResultResponse</returns>
        public UpdateMultipleResultResponse PatchResults (UpdateMultipleResultResponse updateMultipleResultPayload = null)
        {
             ApiResponse<UpdateMultipleResultResponse> localVarResponse = PatchResultsWithHttpInfo(updateMultipleResultPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>ApiResponse of UpdateMultipleResultResponse</returns>
        public ApiResponse< UpdateMultipleResultResponse > PatchResultsWithHttpInfo (UpdateMultipleResultResponse updateMultipleResultPayload = null)
        {

            var localVarPath = "/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateMultipleResultPayload != null && updateMultipleResultPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleResultPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleResultPayload; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateMultipleResultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleResultResponse)));
        }

        /// <summary>
        ///  Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>Task of UpdateMultipleResultResponse</returns>
        public async System.Threading.Tasks.Task<UpdateMultipleResultResponse> PatchResultsAsync (UpdateMultipleResultResponse updateMultipleResultPayload = null)
        {
             ApiResponse<UpdateMultipleResultResponse> localVarResponse = await PatchResultsAsyncWithHttpInfo(updateMultipleResultPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Multiple results can be updated simultaneously by providing the relevant result_ids in the body of your request. The response will tell you whether the batch of updates has either been successful or failed.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateMultipleResultPayload">Payload for update multiple Result request (optional)</param>
        /// <returns>Task of ApiResponse (UpdateMultipleResultResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateMultipleResultResponse>> PatchResultsAsyncWithHttpInfo (UpdateMultipleResultResponse updateMultipleResultPayload = null)
        {

            var localVarPath = "/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateMultipleResultPayload != null && updateMultipleResultPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMultipleResultPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMultipleResultPayload; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateMultipleResultResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateMultipleResultResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateMultipleResultResponse)));
        }

        /// <summary>
        ///  Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Result</returns>
        public Result PatchResultsResultId (string resultId, Result updateResultPayload = null)
        {
             ApiResponse<Result> localVarResponse = PatchResultsResultIdWithHttpInfo(resultId, updateResultPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>ApiResponse of Result</returns>
        public ApiResponse< Result > PatchResultsResultIdWithHttpInfo (string resultId, Result updateResultPayload = null)
        {
            // verify the required parameter 'resultId' is set
            if (resultId == null)
                throw new ApiException(400, "Missing required parameter 'resultId' when calling AssessmentsApi->PatchResultsResultId");

            var localVarPath = "/results/{result_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultId != null) localVarPathParams.Add("result_id", this.Configuration.ApiClient.ParameterToString(resultId)); // path parameter
            if (updateResultPayload != null && updateResultPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateResultPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateResultPayload; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResultsResultId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

        /// <summary>
        ///  Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Task of Result</returns>
        public async System.Threading.Tasks.Task<Result> PatchResultsResultIdAsync (string resultId, Result updateResultPayload = null)
        {
             ApiResponse<Result> localVarResponse = await PatchResultsResultIdAsyncWithHttpInfo(resultId, updateResultPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Once a result has been created, it can be updated on the Platform by passing the required field values in the request body. A list of the fields that were changed are returned in the response.
        /// </summary>
        /// <exception cref="assembly-client-dotnet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resultId">ID of the Result as an Integer</param>
        /// <param name="updateResultPayload">Payload for update Result request (optional)</param>
        /// <returns>Task of ApiResponse (Result)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Result>> PatchResultsResultIdAsyncWithHttpInfo (string resultId, Result updateResultPayload = null)
        {
            // verify the required parameter 'resultId' is set
            if (resultId == null)
                throw new ApiException(400, "Missing required parameter 'resultId' when calling AssessmentsApi->PatchResultsResultId");

            var localVarPath = "/results/{result_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resultId != null) localVarPathParams.Add("result_id", this.Configuration.ApiClient.ParameterToString(resultId)); // path parameter
            if (updateResultPayload != null && updateResultPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateResultPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateResultPayload; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchResultsResultId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Result>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Result) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Result)));
        }

    }
}
