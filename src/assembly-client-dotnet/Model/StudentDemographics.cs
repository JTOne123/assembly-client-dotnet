/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// Demographics information about the student.
    /// </summary>
    [DataContract]
    public partial class StudentDemographics :  IEquatable<StudentDemographics>, IValidatableObject
    {
        /// <summary>
        /// The gender of the student *Values*  |Value|Description| |- --|- --| |&#x60;M&#x60;|Male| |&#x60;F&#x60;|Female| 
        /// </summary>
        /// <value>The gender of the student *Values*  |Value|Description| |- --|- --| |&#x60;M&#x60;|Male| |&#x60;F&#x60;|Female| </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,
            
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2
        }

        /// <summary>
        /// The gender of the student *Values*  |Value|Description| |- --|- --| |&#x60;M&#x60;|Male| |&#x60;F&#x60;|Female| 
        /// </summary>
        /// <value>The gender of the student *Values*  |Value|Description| |- --|- --| |&#x60;M&#x60;|Male| |&#x60;F&#x60;|Female| </value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Special Education Need (SEN) - indicates a student has learning difficulties and requires special education provision. *Values*  |Value|Description| |- --|- --| |&#x60;null&#x60;|Not eligable| |&#x60;N&#x60;|None| |&#x60;S&#x60;|Statement| |&#x60;E&#x60;|Education, Health and Care Plan| |&#x60;K&#x60;|SEN Support| |&#x60;A&#x60;|School Action (no longer valid)| |&#x60;P&#x60;|School Action Plus (no longer valid)| 
        /// </summary>
        /// <value>Special Education Need (SEN) - indicates a student has learning difficulties and requires special education provision. *Values*  |Value|Description| |- --|- --| |&#x60;null&#x60;|Not eligable| |&#x60;N&#x60;|None| |&#x60;S&#x60;|Statement| |&#x60;E&#x60;|Education, Health and Care Plan| |&#x60;K&#x60;|SEN Support| |&#x60;A&#x60;|School Action (no longer valid)| |&#x60;P&#x60;|School Action Plus (no longer valid)| </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SenCategoryEnum
        {
            
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,
            
            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 3,
            
            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 4,
            
            /// <summary>
            /// Enum K for value: K
            /// </summary>
            [EnumMember(Value = "K")]
            K = 5,
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 6,
            
            /// <summary>
            /// Enum P for value: P
            /// </summary>
            [EnumMember(Value = "P")]
            P = 7
        }

        /// <summary>
        /// Special Education Need (SEN) - indicates a student has learning difficulties and requires special education provision. *Values*  |Value|Description| |- --|- --| |&#x60;null&#x60;|Not eligable| |&#x60;N&#x60;|None| |&#x60;S&#x60;|Statement| |&#x60;E&#x60;|Education, Health and Care Plan| |&#x60;K&#x60;|SEN Support| |&#x60;A&#x60;|School Action (no longer valid)| |&#x60;P&#x60;|School Action Plus (no longer valid)| 
        /// </summary>
        /// <value>Special Education Need (SEN) - indicates a student has learning difficulties and requires special education provision. *Values*  |Value|Description| |- --|- --| |&#x60;null&#x60;|Not eligable| |&#x60;N&#x60;|None| |&#x60;S&#x60;|Statement| |&#x60;E&#x60;|Education, Health and Care Plan| |&#x60;K&#x60;|SEN Support| |&#x60;A&#x60;|School Action (no longer valid)| |&#x60;P&#x60;|School Action Plus (no longer valid)| </value>
        [DataMember(Name="sen_category", EmitDefaultValue=false)]
        public SenCategoryEnum? SenCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentDemographics" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="ethnicityCode">A detailed, Dfe standardised way of categorising the ethnicity of a student.</param>
        /// <param name="ethnicityGroup">A broader categorisation of ethnicity that is standardised across the country, with all ethnicity codes grouped in to 8 sections.</param>
        /// <param name="gender">The gender of the student *Values*  |Value|Description| |- --|- --| |&#x60;M&#x60;|Male| |&#x60;F&#x60;|Female| .</param>
        /// <param name="inCare">Looked after status - indicates whether the student is &#39;looked after&#39; by the local authority (this field will only be returned if &amp;demographics&#x3D;true and &amp;care&#x3D;true is included in your request).</param>
        /// <param name="isEal">English as an Additional Language (EAL) - this field will be true for a student whose first language is not English.</param>
        /// <param name="isFsm">Free School Meals (FSM) - indicates if the student is eligible for free school meals.</param>
        /// <param name="fsmReviewDate">Free school meal review date -Review date for pupil&#39;s free school meal eligibility.</param>
        /// <param name="isPp">Pupil Premium (PP) - schools receive extra funding for students who qualify as Pupil Premium. The includes any student who has qualified for Free School Meals (FSM) in the last 6 years, and any student in local-authority care.</param>
        /// <param name="senCategory">Special Education Need (SEN) - indicates a student has learning difficulties and requires special education provision. *Values*  |Value|Description| |- --|- --| |&#x60;null&#x60;|Not eligable| |&#x60;N&#x60;|None| |&#x60;S&#x60;|Statement| |&#x60;E&#x60;|Education, Health and Care Plan| |&#x60;K&#x60;|SEN Support| |&#x60;A&#x60;|School Action (no longer valid)| |&#x60;P&#x60;|School Action Plus (no longer valid)| .</param>
        /// <param name="senNeeds">senNeeds.</param>
        /// <param name="countryOfBirth">The country of birth of the student.</param>
        /// <param name="nationalities">The nationality or nationalities of the student.</param>
        public StudentDemographics(string _object = default(string), string ethnicityCode = default(string), string ethnicityGroup = default(string), GenderEnum? gender = default(GenderEnum?), bool? inCare = default(bool?), bool? isEal = default(bool?), bool? isFsm = default(bool?), DateTime? fsmReviewDate = default(DateTime?), bool? isPp = default(bool?), SenCategoryEnum? senCategory = default(SenCategoryEnum?), StudentDemographicsSenNeeds senNeeds = default(StudentDemographicsSenNeeds), string countryOfBirth = default(string), List<string> nationalities = default(List<string>))
        {
            this.Object = _object;
            this.EthnicityCode = ethnicityCode;
            this.EthnicityGroup = ethnicityGroup;
            this.Gender = gender;
            this.InCare = inCare;
            this.IsEal = isEal;
            this.IsFsm = isFsm;
            this.FsmReviewDate = fsmReviewDate;
            this.IsPp = isPp;
            this.SenCategory = senCategory;
            this.SenNeeds = senNeeds;
            this.CountryOfBirth = countryOfBirth;
            this.Nationalities = nationalities;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// A detailed, Dfe standardised way of categorising the ethnicity of a student
        /// </summary>
        /// <value>A detailed, Dfe standardised way of categorising the ethnicity of a student</value>
        [DataMember(Name="ethnicity_code", EmitDefaultValue=false)]
        public string EthnicityCode { get; set; }

        /// <summary>
        /// A broader categorisation of ethnicity that is standardised across the country, with all ethnicity codes grouped in to 8 sections
        /// </summary>
        /// <value>A broader categorisation of ethnicity that is standardised across the country, with all ethnicity codes grouped in to 8 sections</value>
        [DataMember(Name="ethnicity_group", EmitDefaultValue=false)]
        public string EthnicityGroup { get; set; }


        /// <summary>
        /// Looked after status - indicates whether the student is &#39;looked after&#39; by the local authority (this field will only be returned if &amp;demographics&#x3D;true and &amp;care&#x3D;true is included in your request)
        /// </summary>
        /// <value>Looked after status - indicates whether the student is &#39;looked after&#39; by the local authority (this field will only be returned if &amp;demographics&#x3D;true and &amp;care&#x3D;true is included in your request)</value>
        [DataMember(Name="in_care", EmitDefaultValue=false)]
        public bool? InCare { get; set; }

        /// <summary>
        /// English as an Additional Language (EAL) - this field will be true for a student whose first language is not English
        /// </summary>
        /// <value>English as an Additional Language (EAL) - this field will be true for a student whose first language is not English</value>
        [DataMember(Name="is_eal", EmitDefaultValue=false)]
        public bool? IsEal { get; set; }

        /// <summary>
        /// Free School Meals (FSM) - indicates if the student is eligible for free school meals
        /// </summary>
        /// <value>Free School Meals (FSM) - indicates if the student is eligible for free school meals</value>
        [DataMember(Name="is_fsm", EmitDefaultValue=false)]
        public bool? IsFsm { get; set; }

        /// <summary>
        /// Free school meal review date -Review date for pupil&#39;s free school meal eligibility
        /// </summary>
        /// <value>Free school meal review date -Review date for pupil&#39;s free school meal eligibility</value>
        [DataMember(Name="fsm_review_date", EmitDefaultValue=false)]
        public DateTime? FsmReviewDate { get; set; }

        /// <summary>
        /// Pupil Premium (PP) - schools receive extra funding for students who qualify as Pupil Premium. The includes any student who has qualified for Free School Meals (FSM) in the last 6 years, and any student in local-authority care
        /// </summary>
        /// <value>Pupil Premium (PP) - schools receive extra funding for students who qualify as Pupil Premium. The includes any student who has qualified for Free School Meals (FSM) in the last 6 years, and any student in local-authority care</value>
        [DataMember(Name="is_pp", EmitDefaultValue=false)]
        public bool? IsPp { get; set; }


        /// <summary>
        /// Gets or Sets SenNeeds
        /// </summary>
        [DataMember(Name="sen_needs", EmitDefaultValue=false)]
        public StudentDemographicsSenNeeds SenNeeds { get; set; }

        /// <summary>
        /// The country of birth of the student
        /// </summary>
        /// <value>The country of birth of the student</value>
        [DataMember(Name="country_of_birth", EmitDefaultValue=false)]
        public string CountryOfBirth { get; set; }

        /// <summary>
        /// The nationality or nationalities of the student
        /// </summary>
        /// <value>The nationality or nationalities of the student</value>
        [DataMember(Name="nationalities", EmitDefaultValue=false)]
        public List<string> Nationalities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentDemographics {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  EthnicityCode: ").Append(EthnicityCode).Append("\n");
            sb.Append("  EthnicityGroup: ").Append(EthnicityGroup).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  InCare: ").Append(InCare).Append("\n");
            sb.Append("  IsEal: ").Append(IsEal).Append("\n");
            sb.Append("  IsFsm: ").Append(IsFsm).Append("\n");
            sb.Append("  FsmReviewDate: ").Append(FsmReviewDate).Append("\n");
            sb.Append("  IsPp: ").Append(IsPp).Append("\n");
            sb.Append("  SenCategory: ").Append(SenCategory).Append("\n");
            sb.Append("  SenNeeds: ").Append(SenNeeds).Append("\n");
            sb.Append("  CountryOfBirth: ").Append(CountryOfBirth).Append("\n");
            sb.Append("  Nationalities: ").Append(Nationalities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentDemographics);
        }

        /// <summary>
        /// Returns true if StudentDemographics instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentDemographics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentDemographics input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.EthnicityCode == input.EthnicityCode ||
                    (this.EthnicityCode != null &&
                    this.EthnicityCode.Equals(input.EthnicityCode))
                ) && 
                (
                    this.EthnicityGroup == input.EthnicityGroup ||
                    (this.EthnicityGroup != null &&
                    this.EthnicityGroup.Equals(input.EthnicityGroup))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.InCare == input.InCare ||
                    (this.InCare != null &&
                    this.InCare.Equals(input.InCare))
                ) && 
                (
                    this.IsEal == input.IsEal ||
                    (this.IsEal != null &&
                    this.IsEal.Equals(input.IsEal))
                ) && 
                (
                    this.IsFsm == input.IsFsm ||
                    (this.IsFsm != null &&
                    this.IsFsm.Equals(input.IsFsm))
                ) && 
                (
                    this.FsmReviewDate == input.FsmReviewDate ||
                    (this.FsmReviewDate != null &&
                    this.FsmReviewDate.Equals(input.FsmReviewDate))
                ) && 
                (
                    this.IsPp == input.IsPp ||
                    (this.IsPp != null &&
                    this.IsPp.Equals(input.IsPp))
                ) && 
                (
                    this.SenCategory == input.SenCategory ||
                    (this.SenCategory != null &&
                    this.SenCategory.Equals(input.SenCategory))
                ) && 
                (
                    this.SenNeeds == input.SenNeeds ||
                    (this.SenNeeds != null &&
                    this.SenNeeds.Equals(input.SenNeeds))
                ) && 
                (
                    this.CountryOfBirth == input.CountryOfBirth ||
                    (this.CountryOfBirth != null &&
                    this.CountryOfBirth.Equals(input.CountryOfBirth))
                ) && 
                (
                    this.Nationalities == input.Nationalities ||
                    this.Nationalities != null &&
                    this.Nationalities.SequenceEqual(input.Nationalities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.EthnicityCode != null)
                    hashCode = hashCode * 59 + this.EthnicityCode.GetHashCode();
                if (this.EthnicityGroup != null)
                    hashCode = hashCode * 59 + this.EthnicityGroup.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.InCare != null)
                    hashCode = hashCode * 59 + this.InCare.GetHashCode();
                if (this.IsEal != null)
                    hashCode = hashCode * 59 + this.IsEal.GetHashCode();
                if (this.IsFsm != null)
                    hashCode = hashCode * 59 + this.IsFsm.GetHashCode();
                if (this.FsmReviewDate != null)
                    hashCode = hashCode * 59 + this.FsmReviewDate.GetHashCode();
                if (this.IsPp != null)
                    hashCode = hashCode * 59 + this.IsPp.GetHashCode();
                if (this.SenCategory != null)
                    hashCode = hashCode * 59 + this.SenCategory.GetHashCode();
                if (this.SenNeeds != null)
                    hashCode = hashCode * 59 + this.SenNeeds.GetHashCode();
                if (this.CountryOfBirth != null)
                    hashCode = hashCode * 59 + this.CountryOfBirth.GetHashCode();
                if (this.Nationalities != null)
                    hashCode = hashCode * 59 + this.Nationalities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
