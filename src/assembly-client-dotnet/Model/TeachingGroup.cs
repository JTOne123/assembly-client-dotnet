/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// A teaching group object represents the grouping in which students are taught a subject.
    /// </summary>
    [DataContract]
    public partial class TeachingGroup :  IEquatable<TeachingGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeachingGroup" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all teaching groups in the Platform.</param>
        /// <param name="name">Name of teaching group.</param>
        /// <param name="startDate">The start date of the teaching group.</param>
        /// <param name="endDate">The end date of the teaching group.</param>
        /// <param name="supervisorIds">The IDs of supervisors associated with the teaching group.</param>
        /// <param name="studentIds">The IDs of students associated with the teaching group.</param>
        /// <param name="subject">subject.</param>
        /// <param name="misLevel">The official examination or assessment &#39;level&#39; of the teaching group taken directly from the MIS.</param>
        public TeachingGroup(string _object = default(string), int? id = default(int?), string name = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<int?> supervisorIds = default(List<int?>), List<int?> studentIds = default(List<int?>), TeachingGroupSubject subject = default(TeachingGroupSubject), string misLevel = default(string))
        {
            this.Object = _object;
            this.Id = id;
            this.Name = name;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.SupervisorIds = supervisorIds;
            this.StudentIds = studentIds;
            this.Subject = subject;
            this.MisLevel = misLevel;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// Internal stable ID given to all teaching groups in the Platform
        /// </summary>
        /// <value>Internal stable ID given to all teaching groups in the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of teaching group
        /// </summary>
        /// <value>Name of teaching group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The start date of the teaching group
        /// </summary>
        /// <value>The start date of the teaching group</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The end date of the teaching group
        /// </summary>
        /// <value>The end date of the teaching group</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// The IDs of supervisors associated with the teaching group
        /// </summary>
        /// <value>The IDs of supervisors associated with the teaching group</value>
        [DataMember(Name="supervisor_ids", EmitDefaultValue=false)]
        public List<int?> SupervisorIds { get; set; }

        /// <summary>
        /// The IDs of students associated with the teaching group
        /// </summary>
        /// <value>The IDs of students associated with the teaching group</value>
        [DataMember(Name="student_ids", EmitDefaultValue=false)]
        public List<int?> StudentIds { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public TeachingGroupSubject Subject { get; set; }

        /// <summary>
        /// The official examination or assessment &#39;level&#39; of the teaching group taken directly from the MIS
        /// </summary>
        /// <value>The official examination or assessment &#39;level&#39; of the teaching group taken directly from the MIS</value>
        [DataMember(Name="mis_level", EmitDefaultValue=false)]
        public string MisLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeachingGroup {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  SupervisorIds: ").Append(SupervisorIds).Append("\n");
            sb.Append("  StudentIds: ").Append(StudentIds).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MisLevel: ").Append(MisLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeachingGroup);
        }

        /// <summary>
        /// Returns true if TeachingGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of TeachingGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeachingGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.SupervisorIds == input.SupervisorIds ||
                    this.SupervisorIds != null &&
                    this.SupervisorIds.SequenceEqual(input.SupervisorIds)
                ) && 
                (
                    this.StudentIds == input.StudentIds ||
                    this.StudentIds != null &&
                    this.StudentIds.SequenceEqual(input.StudentIds)
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.MisLevel == input.MisLevel ||
                    (this.MisLevel != null &&
                    this.MisLevel.Equals(input.MisLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.SupervisorIds != null)
                    hashCode = hashCode * 59 + this.SupervisorIds.GetHashCode();
                if (this.StudentIds != null)
                    hashCode = hashCode * 59 + this.StudentIds.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.MisLevel != null)
                    hashCode = hashCode * 59 + this.MisLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
