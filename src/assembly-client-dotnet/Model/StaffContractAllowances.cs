/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// No description
    /// </summary>
    [DataContract]
    public partial class StaffContractAllowances :  IEquatable<StaffContractAllowances>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffContractAllowances" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="additionalPaymentType">No description.</param>
        /// <param name="additionalPaymentAmount">No description.</param>
        /// <param name="startDate">No description.</param>
        /// <param name="endDate">No description.</param>
        public StaffContractAllowances(string _object = default(string), string additionalPaymentType = default(string), float? additionalPaymentAmount = default(float?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.Object = _object;
            this.AdditionalPaymentType = additionalPaymentType;
            this.AdditionalPaymentAmount = additionalPaymentAmount;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="additional_payment_type", EmitDefaultValue=false)]
        public string AdditionalPaymentType { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="additional_payment_amount", EmitDefaultValue=false)]
        public float? AdditionalPaymentAmount { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffContractAllowances {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  AdditionalPaymentType: ").Append(AdditionalPaymentType).Append("\n");
            sb.Append("  AdditionalPaymentAmount: ").Append(AdditionalPaymentAmount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffContractAllowances);
        }

        /// <summary>
        /// Returns true if StaffContractAllowances instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffContractAllowances to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffContractAllowances input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.AdditionalPaymentType == input.AdditionalPaymentType ||
                    (this.AdditionalPaymentType != null &&
                    this.AdditionalPaymentType.Equals(input.AdditionalPaymentType))
                ) && 
                (
                    this.AdditionalPaymentAmount == input.AdditionalPaymentAmount ||
                    (this.AdditionalPaymentAmount != null &&
                    this.AdditionalPaymentAmount.Equals(input.AdditionalPaymentAmount))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.AdditionalPaymentType != null)
                    hashCode = hashCode * 59 + this.AdditionalPaymentType.GetHashCode();
                if (this.AdditionalPaymentAmount != null)
                    hashCode = hashCode * 59 + this.AdditionalPaymentAmount.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
