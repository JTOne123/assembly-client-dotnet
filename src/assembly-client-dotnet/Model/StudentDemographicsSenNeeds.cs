/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// A student&#39;s SEN Need information.
    /// </summary>
    [DataContract]
    public partial class StudentDemographicsSenNeeds :  IEquatable<StudentDemographicsSenNeeds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentDemographicsSenNeeds" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">The id of the sen need.</param>
        /// <param name="startDate">The start date for the need.</param>
        /// <param name="senNeedCode">The code of the sen need.</param>
        /// <param name="senNeedName">The name of the sen need.</param>
        /// <param name="senBroadNeedTypeCode">The code for the broad need.</param>
        /// <param name="senBroadNeedTypeName">The name of the broad need.</param>
        /// <param name="priority">The priority of the sen need.</param>
        public StudentDemographicsSenNeeds(string _object = default(string), int? id = default(int?), DateTime? startDate = default(DateTime?), string senNeedCode = default(string), string senNeedName = default(string), string senBroadNeedTypeCode = default(string), string senBroadNeedTypeName = default(string), int? priority = default(int?))
        {
            this.Object = _object;
            this.Id = id;
            this.StartDate = startDate;
            this.SenNeedCode = senNeedCode;
            this.SenNeedName = senNeedName;
            this.SenBroadNeedTypeCode = senBroadNeedTypeCode;
            this.SenBroadNeedTypeName = senBroadNeedTypeName;
            this.Priority = priority;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// The id of the sen need
        /// </summary>
        /// <value>The id of the sen need</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The start date for the need
        /// </summary>
        /// <value>The start date for the need</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The code of the sen need
        /// </summary>
        /// <value>The code of the sen need</value>
        [DataMember(Name="sen_need_code", EmitDefaultValue=false)]
        public string SenNeedCode { get; set; }

        /// <summary>
        /// The name of the sen need
        /// </summary>
        /// <value>The name of the sen need</value>
        [DataMember(Name="sen_need_name", EmitDefaultValue=false)]
        public string SenNeedName { get; set; }

        /// <summary>
        /// The code for the broad need
        /// </summary>
        /// <value>The code for the broad need</value>
        [DataMember(Name="sen_broad_need_type_code", EmitDefaultValue=false)]
        public string SenBroadNeedTypeCode { get; set; }

        /// <summary>
        /// The name of the broad need
        /// </summary>
        /// <value>The name of the broad need</value>
        [DataMember(Name="sen_broad_need_type_name", EmitDefaultValue=false)]
        public string SenBroadNeedTypeName { get; set; }

        /// <summary>
        /// The priority of the sen need
        /// </summary>
        /// <value>The priority of the sen need</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentDemographicsSenNeeds {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SenNeedCode: ").Append(SenNeedCode).Append("\n");
            sb.Append("  SenNeedName: ").Append(SenNeedName).Append("\n");
            sb.Append("  SenBroadNeedTypeCode: ").Append(SenBroadNeedTypeCode).Append("\n");
            sb.Append("  SenBroadNeedTypeName: ").Append(SenBroadNeedTypeName).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentDemographicsSenNeeds);
        }

        /// <summary>
        /// Returns true if StudentDemographicsSenNeeds instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentDemographicsSenNeeds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentDemographicsSenNeeds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.SenNeedCode == input.SenNeedCode ||
                    (this.SenNeedCode != null &&
                    this.SenNeedCode.Equals(input.SenNeedCode))
                ) && 
                (
                    this.SenNeedName == input.SenNeedName ||
                    (this.SenNeedName != null &&
                    this.SenNeedName.Equals(input.SenNeedName))
                ) && 
                (
                    this.SenBroadNeedTypeCode == input.SenBroadNeedTypeCode ||
                    (this.SenBroadNeedTypeCode != null &&
                    this.SenBroadNeedTypeCode.Equals(input.SenBroadNeedTypeCode))
                ) && 
                (
                    this.SenBroadNeedTypeName == input.SenBroadNeedTypeName ||
                    (this.SenBroadNeedTypeName != null &&
                    this.SenBroadNeedTypeName.Equals(input.SenBroadNeedTypeName))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.SenNeedCode != null)
                    hashCode = hashCode * 59 + this.SenNeedCode.GetHashCode();
                if (this.SenNeedName != null)
                    hashCode = hashCode * 59 + this.SenNeedName.GetHashCode();
                if (this.SenBroadNeedTypeCode != null)
                    hashCode = hashCode * 59 + this.SenBroadNeedTypeCode.GetHashCode();
                if (this.SenBroadNeedTypeName != null)
                    hashCode = hashCode * 59 + this.SenBroadNeedTypeName.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
