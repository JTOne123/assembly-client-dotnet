/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// A student&#39;s language information.
    /// </summary>
    [DataContract]
    public partial class StudentLanguages :  IEquatable<StudentLanguages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentLanguages" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="homeLanguageCode">The code of a student&#39;s home language.</param>
        /// <param name="homeLanguageName">The name of a student&#39;s home language.</param>
        /// <param name="firstLanguageCode">The code of a student&#39;s first language.</param>
        /// <param name="firstLanguageName">The name of a student&#39;s first language.</param>
        /// <param name="proficiencyInEnglishCode">A student&#39;s proficiency in English code.</param>
        /// <param name="proficiencyInEnglishName">A student&#39;s proficiency in English name.</param>
        public StudentLanguages(string _object = default(string), string homeLanguageCode = default(string), string homeLanguageName = default(string), string firstLanguageCode = default(string), string firstLanguageName = default(string), string proficiencyInEnglishCode = default(string), string proficiencyInEnglishName = default(string))
        {
            this.Object = _object;
            this.HomeLanguageCode = homeLanguageCode;
            this.HomeLanguageName = homeLanguageName;
            this.FirstLanguageCode = firstLanguageCode;
            this.FirstLanguageName = firstLanguageName;
            this.ProficiencyInEnglishCode = proficiencyInEnglishCode;
            this.ProficiencyInEnglishName = proficiencyInEnglishName;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// The code of a student&#39;s home language
        /// </summary>
        /// <value>The code of a student&#39;s home language</value>
        [DataMember(Name="home_language_code", EmitDefaultValue=false)]
        public string HomeLanguageCode { get; set; }

        /// <summary>
        /// The name of a student&#39;s home language
        /// </summary>
        /// <value>The name of a student&#39;s home language</value>
        [DataMember(Name="home_language_name", EmitDefaultValue=false)]
        public string HomeLanguageName { get; set; }

        /// <summary>
        /// The code of a student&#39;s first language
        /// </summary>
        /// <value>The code of a student&#39;s first language</value>
        [DataMember(Name="first_language_code", EmitDefaultValue=false)]
        public string FirstLanguageCode { get; set; }

        /// <summary>
        /// The name of a student&#39;s first language
        /// </summary>
        /// <value>The name of a student&#39;s first language</value>
        [DataMember(Name="first_language_name", EmitDefaultValue=false)]
        public string FirstLanguageName { get; set; }

        /// <summary>
        /// A student&#39;s proficiency in English code
        /// </summary>
        /// <value>A student&#39;s proficiency in English code</value>
        [DataMember(Name="proficiency_in_english_code", EmitDefaultValue=false)]
        public string ProficiencyInEnglishCode { get; set; }

        /// <summary>
        /// A student&#39;s proficiency in English name
        /// </summary>
        /// <value>A student&#39;s proficiency in English name</value>
        [DataMember(Name="proficiency_in_english_name", EmitDefaultValue=false)]
        public string ProficiencyInEnglishName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentLanguages {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  HomeLanguageCode: ").Append(HomeLanguageCode).Append("\n");
            sb.Append("  HomeLanguageName: ").Append(HomeLanguageName).Append("\n");
            sb.Append("  FirstLanguageCode: ").Append(FirstLanguageCode).Append("\n");
            sb.Append("  FirstLanguageName: ").Append(FirstLanguageName).Append("\n");
            sb.Append("  ProficiencyInEnglishCode: ").Append(ProficiencyInEnglishCode).Append("\n");
            sb.Append("  ProficiencyInEnglishName: ").Append(ProficiencyInEnglishName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentLanguages);
        }

        /// <summary>
        /// Returns true if StudentLanguages instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentLanguages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentLanguages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.HomeLanguageCode == input.HomeLanguageCode ||
                    (this.HomeLanguageCode != null &&
                    this.HomeLanguageCode.Equals(input.HomeLanguageCode))
                ) && 
                (
                    this.HomeLanguageName == input.HomeLanguageName ||
                    (this.HomeLanguageName != null &&
                    this.HomeLanguageName.Equals(input.HomeLanguageName))
                ) && 
                (
                    this.FirstLanguageCode == input.FirstLanguageCode ||
                    (this.FirstLanguageCode != null &&
                    this.FirstLanguageCode.Equals(input.FirstLanguageCode))
                ) && 
                (
                    this.FirstLanguageName == input.FirstLanguageName ||
                    (this.FirstLanguageName != null &&
                    this.FirstLanguageName.Equals(input.FirstLanguageName))
                ) && 
                (
                    this.ProficiencyInEnglishCode == input.ProficiencyInEnglishCode ||
                    (this.ProficiencyInEnglishCode != null &&
                    this.ProficiencyInEnglishCode.Equals(input.ProficiencyInEnglishCode))
                ) && 
                (
                    this.ProficiencyInEnglishName == input.ProficiencyInEnglishName ||
                    (this.ProficiencyInEnglishName != null &&
                    this.ProficiencyInEnglishName.Equals(input.ProficiencyInEnglishName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.HomeLanguageCode != null)
                    hashCode = hashCode * 59 + this.HomeLanguageCode.GetHashCode();
                if (this.HomeLanguageName != null)
                    hashCode = hashCode * 59 + this.HomeLanguageName.GetHashCode();
                if (this.FirstLanguageCode != null)
                    hashCode = hashCode * 59 + this.FirstLanguageCode.GetHashCode();
                if (this.FirstLanguageName != null)
                    hashCode = hashCode * 59 + this.FirstLanguageName.GetHashCode();
                if (this.ProficiencyInEnglishCode != null)
                    hashCode = hashCode * 59 + this.ProficiencyInEnglishCode.GetHashCode();
                if (this.ProficiencyInEnglishName != null)
                    hashCode = hashCode * 59 + this.ProficiencyInEnglishName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
