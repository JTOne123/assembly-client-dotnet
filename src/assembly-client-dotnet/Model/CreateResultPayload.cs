/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = assembly-client-dotnet.Client.SwaggerDateConverter;

namespace assembly-client-dotnet.Model
{
    /// <summary>
    /// Payload for create Result request
    /// </summary>
    [DataContract]
    public partial class CreateResultPayload :  IEquatable<CreateResultPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateResultPayload" /> class.
        /// </summary>
        /// <param name="subjectId">No description.</param>
        /// <param name="facetId">No description.</param>
        /// <param name="assessmentPointRank">No description.</param>
        /// <param name="assessmentId">No description.</param>
        /// <param name="results">No description.</param>
        public CreateResultPayload(int? subjectId = default(int?), int? facetId = default(int?), int? assessmentPointRank = default(int?), int? assessmentId = default(int?), List<CreateResultPayloadResults> results = default(List<CreateResultPayloadResults>))
        {
            this.SubjectId = subjectId;
            this.FacetId = facetId;
            this.AssessmentPointRank = assessmentPointRank;
            this.AssessmentId = assessmentId;
            this.Results = results;
        }
        
        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="subject_id", EmitDefaultValue=false)]
        public int? SubjectId { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="facet_id", EmitDefaultValue=false)]
        public int? FacetId { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="assessment_point_rank", EmitDefaultValue=false)]
        public int? AssessmentPointRank { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="assessment_id", EmitDefaultValue=false)]
        public int? AssessmentId { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<CreateResultPayloadResults> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateResultPayload {\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  FacetId: ").Append(FacetId).Append("\n");
            sb.Append("  AssessmentPointRank: ").Append(AssessmentPointRank).Append("\n");
            sb.Append("  AssessmentId: ").Append(AssessmentId).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateResultPayload);
        }

        /// <summary>
        /// Returns true if CreateResultPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateResultPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateResultPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.FacetId == input.FacetId ||
                    (this.FacetId != null &&
                    this.FacetId.Equals(input.FacetId))
                ) && 
                (
                    this.AssessmentPointRank == input.AssessmentPointRank ||
                    (this.AssessmentPointRank != null &&
                    this.AssessmentPointRank.Equals(input.AssessmentPointRank))
                ) && 
                (
                    this.AssessmentId == input.AssessmentId ||
                    (this.AssessmentId != null &&
                    this.AssessmentId.Equals(input.AssessmentId))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SubjectId != null)
                    hashCode = hashCode * 59 + this.SubjectId.GetHashCode();
                if (this.FacetId != null)
                    hashCode = hashCode * 59 + this.FacetId.GetHashCode();
                if (this.AssessmentPointRank != null)
                    hashCode = hashCode * 59 + this.AssessmentPointRank.GetHashCode();
                if (this.AssessmentId != null)
                    hashCode = hashCode * 59 + this.AssessmentId.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
