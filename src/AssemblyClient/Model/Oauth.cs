/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// The OAuth endpoints are available to gain authorisation to access a school&#39;s data.
    /// </summary>
    [DataContract]
    public partial class Oauth :  IEquatable<Oauth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth" /> class.
        /// </summary>
        /// <param name="accessToken">Access token grants authorisation to school data (currently valid for a period of 1 day).</param>
        /// <param name="refreshToken">Refresh tokens should be used to aquire a new access token upon expiry of access tokens.</param>
        /// <param name="tokenType">Provides the client with the information to utilise the access token to make a resource request.</param>
        /// <param name="level">Details whether the token gives access to application level resources or school data..</param>
        /// <param name="expiresIn">The amount of time (in seconds) that the access token is valid for.</param>
        /// <param name="schoolId">Internal Platform ID for school that the token applies to.</param>
        public Oauth(string accessToken = default(string), string refreshToken = default(string), string tokenType = default(string), string level = default(string), int? expiresIn = default(int?), int? schoolId = default(int?))
        {
            this.AccessToken = accessToken;
            this.RefreshToken = refreshToken;
            this.TokenType = tokenType;
            this.Level = level;
            this.ExpiresIn = expiresIn;
            this.SchoolId = schoolId;
        }
        
        /// <summary>
        /// Access token grants authorisation to school data (currently valid for a period of 1 day)
        /// </summary>
        /// <value>Access token grants authorisation to school data (currently valid for a period of 1 day)</value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Refresh tokens should be used to aquire a new access token upon expiry of access tokens
        /// </summary>
        /// <value>Refresh tokens should be used to aquire a new access token upon expiry of access tokens</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Provides the client with the information to utilise the access token to make a resource request
        /// </summary>
        /// <value>Provides the client with the information to utilise the access token to make a resource request</value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Details whether the token gives access to application level resources or school data.
        /// </summary>
        /// <value>Details whether the token gives access to application level resources or school data.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// The amount of time (in seconds) that the access token is valid for
        /// </summary>
        /// <value>The amount of time (in seconds) that the access token is valid for</value>
        [DataMember(Name="expires_in", EmitDefaultValue=false)]
        public int? ExpiresIn { get; set; }

        /// <summary>
        /// Internal Platform ID for school that the token applies to
        /// </summary>
        /// <value>Internal Platform ID for school that the token applies to</value>
        [DataMember(Name="school_id", EmitDefaultValue=false)]
        public int? SchoolId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Oauth {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Oauth);
        }

        /// <summary>
        /// Returns true if Oauth instances are equal
        /// </summary>
        /// <param name="input">Instance of Oauth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Oauth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    (this.SchoolId != null &&
                    this.SchoolId.Equals(input.SchoolId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.SchoolId != null)
                    hashCode = hashCode * 59 + this.SchoolId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
