/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// The OAuth endpoints are available to gain authorisation to access a school&#39;s data.
    /// </summary>
    [DataContract]
    public partial class Oauth :  IEquatable<Oauth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth" /> class.
        /// </summary>
        /// <param name="accessToken">Access token grants authorisation to school data (currently valid for a period of 1 day).</param>
        /// <param name="refreshToken">Refresh tokens should be used to aquire a new access token upon expiry of access tokens.</param>
        /// <param name="tokenType">Provides the client with the information to utilise the access token to make a resource request.</param>
        /// <param name="level">Details whether the token gives access to application level resources or school data..</param>
        /// <param name="expiresIn">The amount of time (in seconds) that the access token is valid for.</param>
        /// <param name="schoolId">Internal Platform ID for school that the token applies to.</param>
        public Oauth(string accessToken = default(string), string refreshToken = default(string), string tokenType = default(string), string level = default(string), int? expiresIn = default(int?), int? schoolId = default(int?))
        {
            this.access_token = accessToken;
            this.refresh_token = refreshToken;
            this.token_type = tokenType;
            this.level = level;
            this.expires_in = expiresIn;
            this.school_id = schoolId;
        }
        
        /// <summary>
        /// Access token grants authorisation to school data (currently valid for a period of 1 day)
        /// </summary>
        /// <value>Access token grants authorisation to school data (currently valid for a period of 1 day)</value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string access_token { get; set; }

        /// <summary>
        /// Refresh tokens should be used to aquire a new access token upon expiry of access tokens
        /// </summary>
        /// <value>Refresh tokens should be used to aquire a new access token upon expiry of access tokens</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string refresh_token { get; set; }

        /// <summary>
        /// Provides the client with the information to utilise the access token to make a resource request
        /// </summary>
        /// <value>Provides the client with the information to utilise the access token to make a resource request</value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public string token_type { get; set; }

        /// <summary>
        /// Details whether the token gives access to application level resources or school data.
        /// </summary>
        /// <value>Details whether the token gives access to application level resources or school data.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string level { get; set; }

        /// <summary>
        /// The amount of time (in seconds) that the access token is valid for
        /// </summary>
        /// <value>The amount of time (in seconds) that the access token is valid for</value>
        [DataMember(Name="expires_in", EmitDefaultValue=false)]
        public int? expires_in { get; set; }

        /// <summary>
        /// Internal Platform ID for school that the token applies to
        /// </summary>
        /// <value>Internal Platform ID for school that the token applies to</value>
        [DataMember(Name="school_id", EmitDefaultValue=false)]
        public int? school_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Oauth {\n");
            sb.Append("  access_token: ").Append(access_token).Append("\n");
            sb.Append("  refresh_token: ").Append(refresh_token).Append("\n");
            sb.Append("  token_type: ").Append(token_type).Append("\n");
            sb.Append("  level: ").Append(level).Append("\n");
            sb.Append("  expires_in: ").Append(expires_in).Append("\n");
            sb.Append("  school_id: ").Append(school_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Oauth);
        }

        /// <summary>
        /// Returns true if Oauth instances are equal
        /// </summary>
        /// <param name="input">Instance of Oauth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Oauth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.access_token == input.access_token ||
                    (this.access_token != null &&
                    this.access_token.Equals(input.access_token))
                ) && 
                (
                    this.refresh_token == input.refresh_token ||
                    (this.refresh_token != null &&
                    this.refresh_token.Equals(input.refresh_token))
                ) && 
                (
                    this.token_type == input.token_type ||
                    (this.token_type != null &&
                    this.token_type.Equals(input.token_type))
                ) && 
                (
                    this.level == input.level ||
                    (this.level != null &&
                    this.level.Equals(input.level))
                ) && 
                (
                    this.expires_in == input.expires_in ||
                    (this.expires_in != null &&
                    this.expires_in.Equals(input.expires_in))
                ) && 
                (
                    this.school_id == input.school_id ||
                    (this.school_id != null &&
                    this.school_id.Equals(input.school_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.access_token != null)
                    hashCode = hashCode * 59 + this.access_token.GetHashCode();
                if (this.refresh_token != null)
                    hashCode = hashCode * 59 + this.refresh_token.GetHashCode();
                if (this.token_type != null)
                    hashCode = hashCode * 59 + this.token_type.GetHashCode();
                if (this.level != null)
                    hashCode = hashCode * 59 + this.level.GetHashCode();
                if (this.expires_in != null)
                    hashCode = hashCode * 59 + this.expires_in.GetHashCode();
                if (this.school_id != null)
                    hashCode = hashCode * 59 + this.school_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
