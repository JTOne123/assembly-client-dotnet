/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// A staff contract object represents a contract for a staff member within a school.
    /// </summary>
    [DataContract]
    public partial class StaffContract :  IEquatable<StaffContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffContract" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to each contract in the Platform.</param>
        /// <param name="staffMemberId">The ID of the staff member.</param>
        /// <param name="startDate">Contract start date.</param>
        /// <param name="endDate">Contract end date.</param>
        /// <param name="nationalInsuranceNumber">Employee NI number.</param>
        /// <param name="payrollNumber">Employee payroll number.</param>
        /// <param name="contractType">Contract type.</param>
        /// <param name="post">No description.</param>
        /// <param name="origin">No description.</param>
        /// <param name="destination">Completed after a contract has been terminated; this captures a post-holder’s destination.</param>
        /// <param name="dailyRate">No description.</param>
        /// <param name="payReviewDate">No description.</param>
        /// <param name="roles">No description.</param>
        /// <param name="salaries">No description.</param>
        /// <param name="allowances">No description.</param>
        public StaffContract(string _object = default(string), int? id = default(int?), string staffMemberId = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string nationalInsuranceNumber = default(string), string payrollNumber = default(string), string contractType = default(string), string post = default(string), string origin = default(string), string destination = default(string), bool? dailyRate = default(bool?), DateTime? payReviewDate = default(DateTime?), List<StaffContractRoles> roles = default(List<StaffContractRoles>), List<StaffContractSalaries> salaries = default(List<StaffContractSalaries>), List<StaffContractAllowances> allowances = default(List<StaffContractAllowances>))
        {
            this._object = _object;
            this.id = id;
            this.staff_member_id = staffMemberId;
            this.start_date = startDate;
            this.end_date = endDate;
            this.national_insurance_number = nationalInsuranceNumber;
            this.payroll_number = payrollNumber;
            this.contract_type = contractType;
            this.post = post;
            this.origin = origin;
            this.destination = destination;
            this.daily_rate = dailyRate;
            this.pay_review_date = payReviewDate;
            this.roles = roles;
            this.salaries = salaries;
            this.allowances = allowances;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to each contract in the Platform
        /// </summary>
        /// <value>Internal stable ID given to each contract in the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// The ID of the staff member
        /// </summary>
        /// <value>The ID of the staff member</value>
        [DataMember(Name="staff_member_id", EmitDefaultValue=false)]
        public string staff_member_id { get; set; }

        /// <summary>
        /// Contract start date
        /// </summary>
        /// <value>Contract start date</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? start_date { get; set; }

        /// <summary>
        /// Contract end date
        /// </summary>
        /// <value>Contract end date</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? end_date { get; set; }

        /// <summary>
        /// Employee NI number
        /// </summary>
        /// <value>Employee NI number</value>
        [DataMember(Name="national_insurance_number", EmitDefaultValue=false)]
        public string national_insurance_number { get; set; }

        /// <summary>
        /// Employee payroll number
        /// </summary>
        /// <value>Employee payroll number</value>
        [DataMember(Name="payroll_number", EmitDefaultValue=false)]
        public string payroll_number { get; set; }

        /// <summary>
        /// Contract type
        /// </summary>
        /// <value>Contract type</value>
        [DataMember(Name="contract_type", EmitDefaultValue=false)]
        public string contract_type { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public string post { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string origin { get; set; }

        /// <summary>
        /// Completed after a contract has been terminated; this captures a post-holder’s destination
        /// </summary>
        /// <value>Completed after a contract has been terminated; this captures a post-holder’s destination</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public string destination { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="daily_rate", EmitDefaultValue=false)]
        public bool? daily_rate { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="pay_review_date", EmitDefaultValue=false)]
        public DateTime? pay_review_date { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<StaffContractRoles> roles { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="salaries", EmitDefaultValue=false)]
        public List<StaffContractSalaries> salaries { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="allowances", EmitDefaultValue=false)]
        public List<StaffContractAllowances> allowances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffContract {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  staff_member_id: ").Append(staff_member_id).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  national_insurance_number: ").Append(national_insurance_number).Append("\n");
            sb.Append("  payroll_number: ").Append(payroll_number).Append("\n");
            sb.Append("  contract_type: ").Append(contract_type).Append("\n");
            sb.Append("  post: ").Append(post).Append("\n");
            sb.Append("  origin: ").Append(origin).Append("\n");
            sb.Append("  destination: ").Append(destination).Append("\n");
            sb.Append("  daily_rate: ").Append(daily_rate).Append("\n");
            sb.Append("  pay_review_date: ").Append(pay_review_date).Append("\n");
            sb.Append("  roles: ").Append(roles).Append("\n");
            sb.Append("  salaries: ").Append(salaries).Append("\n");
            sb.Append("  allowances: ").Append(allowances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffContract);
        }

        /// <summary>
        /// Returns true if StaffContract instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffContract input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.staff_member_id == input.staff_member_id ||
                    (this.staff_member_id != null &&
                    this.staff_member_id.Equals(input.staff_member_id))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.national_insurance_number == input.national_insurance_number ||
                    (this.national_insurance_number != null &&
                    this.national_insurance_number.Equals(input.national_insurance_number))
                ) && 
                (
                    this.payroll_number == input.payroll_number ||
                    (this.payroll_number != null &&
                    this.payroll_number.Equals(input.payroll_number))
                ) && 
                (
                    this.contract_type == input.contract_type ||
                    (this.contract_type != null &&
                    this.contract_type.Equals(input.contract_type))
                ) && 
                (
                    this.post == input.post ||
                    (this.post != null &&
                    this.post.Equals(input.post))
                ) && 
                (
                    this.origin == input.origin ||
                    (this.origin != null &&
                    this.origin.Equals(input.origin))
                ) && 
                (
                    this.destination == input.destination ||
                    (this.destination != null &&
                    this.destination.Equals(input.destination))
                ) && 
                (
                    this.daily_rate == input.daily_rate ||
                    (this.daily_rate != null &&
                    this.daily_rate.Equals(input.daily_rate))
                ) && 
                (
                    this.pay_review_date == input.pay_review_date ||
                    (this.pay_review_date != null &&
                    this.pay_review_date.Equals(input.pay_review_date))
                ) && 
                (
                    this.roles == input.roles ||
                    this.roles != null &&
                    this.roles.SequenceEqual(input.roles)
                ) && 
                (
                    this.salaries == input.salaries ||
                    this.salaries != null &&
                    this.salaries.SequenceEqual(input.salaries)
                ) && 
                (
                    this.allowances == input.allowances ||
                    this.allowances != null &&
                    this.allowances.SequenceEqual(input.allowances)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.staff_member_id != null)
                    hashCode = hashCode * 59 + this.staff_member_id.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.national_insurance_number != null)
                    hashCode = hashCode * 59 + this.national_insurance_number.GetHashCode();
                if (this.payroll_number != null)
                    hashCode = hashCode * 59 + this.payroll_number.GetHashCode();
                if (this.contract_type != null)
                    hashCode = hashCode * 59 + this.contract_type.GetHashCode();
                if (this.post != null)
                    hashCode = hashCode * 59 + this.post.GetHashCode();
                if (this.origin != null)
                    hashCode = hashCode * 59 + this.origin.GetHashCode();
                if (this.destination != null)
                    hashCode = hashCode * 59 + this.destination.GetHashCode();
                if (this.daily_rate != null)
                    hashCode = hashCode * 59 + this.daily_rate.GetHashCode();
                if (this.pay_review_date != null)
                    hashCode = hashCode * 59 + this.pay_review_date.GetHashCode();
                if (this.roles != null)
                    hashCode = hashCode * 59 + this.roles.GetHashCode();
                if (this.salaries != null)
                    hashCode = hashCode * 59 + this.salaries.GetHashCode();
                if (this.allowances != null)
                    hashCode = hashCode * 59 + this.allowances.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
