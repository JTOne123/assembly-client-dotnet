/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyClient.Client.OpenAPIDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// StaffAbsence
    /// </summary>
    [DataContract]
    public partial class StaffAbsence :  IEquatable<StaffAbsence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffAbsence" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="staffMemberId">staffMemberId.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="workingDaysLost">workingDaysLost.</param>
        /// <param name="absenceCategory">absenceCategory.</param>
        /// <param name="illnessCategory">illnessCategory.</param>
        /// <param name="payRate">payRate.</param>
        public StaffAbsence(int? id = default(int?), int? staffMemberId = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string workingDaysLost = default(string), string absenceCategory = default(string), string illnessCategory = default(string), string payRate = default(string))
        {
            this.Id = id;
            this.StaffMemberId = staffMemberId;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.WorkingDaysLost = workingDaysLost;
            this.AbsenceCategory = absenceCategory;
            this.IllnessCategory = illnessCategory;
            this.PayRate = payRate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets StaffMemberId
        /// </summary>
        [DataMember(Name="staff_member_id", EmitDefaultValue=false)]
        public int? StaffMemberId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets WorkingDaysLost
        /// </summary>
        [DataMember(Name="working_days_lost", EmitDefaultValue=false)]
        public string WorkingDaysLost { get; set; }

        /// <summary>
        /// Gets or Sets AbsenceCategory
        /// </summary>
        [DataMember(Name="absence_category", EmitDefaultValue=false)]
        public string AbsenceCategory { get; set; }

        /// <summary>
        /// Gets or Sets IllnessCategory
        /// </summary>
        [DataMember(Name="illness_category", EmitDefaultValue=false)]
        public string IllnessCategory { get; set; }

        /// <summary>
        /// Gets or Sets PayRate
        /// </summary>
        [DataMember(Name="pay_rate", EmitDefaultValue=false)]
        public string PayRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffAbsence {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StaffMemberId: ").Append(StaffMemberId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  WorkingDaysLost: ").Append(WorkingDaysLost).Append("\n");
            sb.Append("  AbsenceCategory: ").Append(AbsenceCategory).Append("\n");
            sb.Append("  IllnessCategory: ").Append(IllnessCategory).Append("\n");
            sb.Append("  PayRate: ").Append(PayRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffAbsence);
        }

        /// <summary>
        /// Returns true if StaffAbsence instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffAbsence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffAbsence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StaffMemberId == input.StaffMemberId ||
                    (this.StaffMemberId != null &&
                    this.StaffMemberId.Equals(input.StaffMemberId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.WorkingDaysLost == input.WorkingDaysLost ||
                    (this.WorkingDaysLost != null &&
                    this.WorkingDaysLost.Equals(input.WorkingDaysLost))
                ) && 
                (
                    this.AbsenceCategory == input.AbsenceCategory ||
                    (this.AbsenceCategory != null &&
                    this.AbsenceCategory.Equals(input.AbsenceCategory))
                ) && 
                (
                    this.IllnessCategory == input.IllnessCategory ||
                    (this.IllnessCategory != null &&
                    this.IllnessCategory.Equals(input.IllnessCategory))
                ) && 
                (
                    this.PayRate == input.PayRate ||
                    (this.PayRate != null &&
                    this.PayRate.Equals(input.PayRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StaffMemberId != null)
                    hashCode = hashCode * 59 + this.StaffMemberId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.WorkingDaysLost != null)
                    hashCode = hashCode * 59 + this.WorkingDaysLost.GetHashCode();
                if (this.AbsenceCategory != null)
                    hashCode = hashCode * 59 + this.AbsenceCategory.GetHashCode();
                if (this.IllnessCategory != null)
                    hashCode = hashCode * 59 + this.IllnessCategory.GetHashCode();
                if (this.PayRate != null)
                    hashCode = hashCode * 59 + this.PayRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
