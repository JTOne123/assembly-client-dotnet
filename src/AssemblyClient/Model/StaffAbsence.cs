/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Details of staff absences recorded on the MIS.
    /// </summary>
    [DataContract]
    public partial class StaffAbsence :  IEquatable<StaffAbsence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffAbsence" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all absences on the Platform.</param>
        /// <param name="staffMemberId">The ID of the staff member who the absence is for.</param>
        /// <param name="startDate">The start date of the absence.</param>
        /// <param name="endDate">The end date of the absence.</param>
        /// <param name="workingDaysLost">Number of working days that were lost during the absence.</param>
        /// <param name="absenceCategory">The category of the absence.</param>
        /// <param name="illnessCategory">If the absence category was &#39;Illness&#39;, the specific code.</param>
        /// <param name="payRate">Whether or not the staff member was paid for the absence, and at what rate.</param>
        public StaffAbsence(string _object = default(string), int? id = default(int?), int? staffMemberId = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), float? workingDaysLost = default(float?), string absenceCategory = default(string), string illnessCategory = default(string), string payRate = default(string))
        {
            this._object = _object;
            this.id = id;
            this.staff_member_id = staffMemberId;
            this.start_date = startDate;
            this.end_date = endDate;
            this.working_days_lost = workingDaysLost;
            this.absence_category = absenceCategory;
            this.illness_category = illnessCategory;
            this.pay_rate = payRate;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to all absences on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all absences on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// The ID of the staff member who the absence is for
        /// </summary>
        /// <value>The ID of the staff member who the absence is for</value>
        [DataMember(Name="staff_member_id", EmitDefaultValue=false)]
        public int? staff_member_id { get; set; }

        /// <summary>
        /// The start date of the absence
        /// </summary>
        /// <value>The start date of the absence</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? start_date { get; set; }

        /// <summary>
        /// The end date of the absence
        /// </summary>
        /// <value>The end date of the absence</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? end_date { get; set; }

        /// <summary>
        /// Number of working days that were lost during the absence
        /// </summary>
        /// <value>Number of working days that were lost during the absence</value>
        [DataMember(Name="working_days_lost", EmitDefaultValue=false)]
        public float? working_days_lost { get; set; }

        /// <summary>
        /// The category of the absence
        /// </summary>
        /// <value>The category of the absence</value>
        [DataMember(Name="absence_category", EmitDefaultValue=false)]
        public string absence_category { get; set; }

        /// <summary>
        /// If the absence category was &#39;Illness&#39;, the specific code
        /// </summary>
        /// <value>If the absence category was &#39;Illness&#39;, the specific code</value>
        [DataMember(Name="illness_category", EmitDefaultValue=false)]
        public string illness_category { get; set; }

        /// <summary>
        /// Whether or not the staff member was paid for the absence, and at what rate
        /// </summary>
        /// <value>Whether or not the staff member was paid for the absence, and at what rate</value>
        [DataMember(Name="pay_rate", EmitDefaultValue=false)]
        public string pay_rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffAbsence {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  staff_member_id: ").Append(staff_member_id).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  working_days_lost: ").Append(working_days_lost).Append("\n");
            sb.Append("  absence_category: ").Append(absence_category).Append("\n");
            sb.Append("  illness_category: ").Append(illness_category).Append("\n");
            sb.Append("  pay_rate: ").Append(pay_rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffAbsence);
        }

        /// <summary>
        /// Returns true if StaffAbsence instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffAbsence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffAbsence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.staff_member_id == input.staff_member_id ||
                    (this.staff_member_id != null &&
                    this.staff_member_id.Equals(input.staff_member_id))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.working_days_lost == input.working_days_lost ||
                    (this.working_days_lost != null &&
                    this.working_days_lost.Equals(input.working_days_lost))
                ) && 
                (
                    this.absence_category == input.absence_category ||
                    (this.absence_category != null &&
                    this.absence_category.Equals(input.absence_category))
                ) && 
                (
                    this.illness_category == input.illness_category ||
                    (this.illness_category != null &&
                    this.illness_category.Equals(input.illness_category))
                ) && 
                (
                    this.pay_rate == input.pay_rate ||
                    (this.pay_rate != null &&
                    this.pay_rate.Equals(input.pay_rate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.staff_member_id != null)
                    hashCode = hashCode * 59 + this.staff_member_id.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.working_days_lost != null)
                    hashCode = hashCode * 59 + this.working_days_lost.GetHashCode();
                if (this.absence_category != null)
                    hashCode = hashCode * 59 + this.absence_category.GetHashCode();
                if (this.illness_category != null)
                    hashCode = hashCode * 59 + this.illness_category.GetHashCode();
                if (this.pay_rate != null)
                    hashCode = hashCode * 59 + this.pay_rate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
