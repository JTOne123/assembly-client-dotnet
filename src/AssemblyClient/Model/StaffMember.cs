/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyClient.Client.OpenAPIDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// StaffMember
    /// </summary>
    [DataContract]
    public partial class StaffMember :  IEquatable<StaffMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffMember" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="misId">misId.</param>
        /// <param name="staffCode">staffCode.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="legalFirstName">legalFirstName.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="legalLastName">legalLastName.</param>
        /// <param name="formerLastName">formerLastName.</param>
        /// <param name="title">title.</param>
        /// <param name="dob">dob.</param>
        /// <param name="email">email.</param>
        /// <param name="isTeachingStaff">isTeachingStaff.</param>
        /// <param name="includedInCensus">includedInCensus.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="qualificationInfo">qualificationInfo.</param>
        public StaffMember(int? id = default(int?), string misId = default(string), string staffCode = default(string), string firstName = default(string), string legalFirstName = default(string), string middleName = default(string), string lastName = default(string), string legalLastName = default(string), string formerLastName = default(string), string title = default(string), DateTime? dob = default(DateTime?), string email = default(string), bool? isTeachingStaff = default(bool?), bool? includedInCensus = default(bool?), string startDate = default(string), string endDate = default(string), StaffMemberDemographics demographics = default(StaffMemberDemographics), StaffMemberQualificationInfo qualificationInfo = default(StaffMemberQualificationInfo))
        {
            this.Id = id;
            this.MisId = misId;
            this.StaffCode = staffCode;
            this.FirstName = firstName;
            this.LegalFirstName = legalFirstName;
            this.MiddleName = middleName;
            this.LastName = lastName;
            this.LegalLastName = legalLastName;
            this.FormerLastName = formerLastName;
            this.Title = title;
            this.Dob = dob;
            this.Email = email;
            this.IsTeachingStaff = isTeachingStaff;
            this.IncludedInCensus = includedInCensus;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Demographics = demographics;
            this.QualificationInfo = qualificationInfo;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets MisId
        /// </summary>
        [DataMember(Name="mis_id", EmitDefaultValue=false)]
        public string MisId { get; set; }

        /// <summary>
        /// Gets or Sets StaffCode
        /// </summary>
        [DataMember(Name="staff_code", EmitDefaultValue=false)]
        public string StaffCode { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LegalFirstName
        /// </summary>
        [DataMember(Name="legal_first_name", EmitDefaultValue=false)]
        public string LegalFirstName { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LegalLastName
        /// </summary>
        [DataMember(Name="legal_last_name", EmitDefaultValue=false)]
        public string LegalLastName { get; set; }

        /// <summary>
        /// Gets or Sets FormerLastName
        /// </summary>
        [DataMember(Name="former_last_name", EmitDefaultValue=false)]
        public string FormerLastName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public DateTime? Dob { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets IsTeachingStaff
        /// </summary>
        [DataMember(Name="is_teaching_staff", EmitDefaultValue=false)]
        public bool? IsTeachingStaff { get; set; }

        /// <summary>
        /// Gets or Sets IncludedInCensus
        /// </summary>
        [DataMember(Name="included_in_census", EmitDefaultValue=false)]
        public bool? IncludedInCensus { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public StaffMemberDemographics Demographics { get; set; }

        /// <summary>
        /// Gets or Sets QualificationInfo
        /// </summary>
        [DataMember(Name="qualification_info", EmitDefaultValue=false)]
        public StaffMemberQualificationInfo QualificationInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffMember {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MisId: ").Append(MisId).Append("\n");
            sb.Append("  StaffCode: ").Append(StaffCode).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LegalFirstName: ").Append(LegalFirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LegalLastName: ").Append(LegalLastName).Append("\n");
            sb.Append("  FormerLastName: ").Append(FormerLastName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsTeachingStaff: ").Append(IsTeachingStaff).Append("\n");
            sb.Append("  IncludedInCensus: ").Append(IncludedInCensus).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("  QualificationInfo: ").Append(QualificationInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffMember);
        }

        /// <summary>
        /// Returns true if StaffMember instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MisId == input.MisId ||
                    (this.MisId != null &&
                    this.MisId.Equals(input.MisId))
                ) && 
                (
                    this.StaffCode == input.StaffCode ||
                    (this.StaffCode != null &&
                    this.StaffCode.Equals(input.StaffCode))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LegalFirstName == input.LegalFirstName ||
                    (this.LegalFirstName != null &&
                    this.LegalFirstName.Equals(input.LegalFirstName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LegalLastName == input.LegalLastName ||
                    (this.LegalLastName != null &&
                    this.LegalLastName.Equals(input.LegalLastName))
                ) && 
                (
                    this.FormerLastName == input.FormerLastName ||
                    (this.FormerLastName != null &&
                    this.FormerLastName.Equals(input.FormerLastName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsTeachingStaff == input.IsTeachingStaff ||
                    (this.IsTeachingStaff != null &&
                    this.IsTeachingStaff.Equals(input.IsTeachingStaff))
                ) && 
                (
                    this.IncludedInCensus == input.IncludedInCensus ||
                    (this.IncludedInCensus != null &&
                    this.IncludedInCensus.Equals(input.IncludedInCensus))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                ) && 
                (
                    this.QualificationInfo == input.QualificationInfo ||
                    (this.QualificationInfo != null &&
                    this.QualificationInfo.Equals(input.QualificationInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MisId != null)
                    hashCode = hashCode * 59 + this.MisId.GetHashCode();
                if (this.StaffCode != null)
                    hashCode = hashCode * 59 + this.StaffCode.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LegalFirstName != null)
                    hashCode = hashCode * 59 + this.LegalFirstName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LegalLastName != null)
                    hashCode = hashCode * 59 + this.LegalLastName.GetHashCode();
                if (this.FormerLastName != null)
                    hashCode = hashCode * 59 + this.FormerLastName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsTeachingStaff != null)
                    hashCode = hashCode * 59 + this.IsTeachingStaff.GetHashCode();
                if (this.IncludedInCensus != null)
                    hashCode = hashCode * 59 + this.IncludedInCensus.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Demographics != null)
                    hashCode = hashCode * 59 + this.Demographics.GetHashCode();
                if (this.QualificationInfo != null)
                    hashCode = hashCode * 59 + this.QualificationInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
