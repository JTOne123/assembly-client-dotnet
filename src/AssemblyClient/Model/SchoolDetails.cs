/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Returns details for the school associated with the provided access_token.
    /// </summary>
    [DataContract]
    public partial class SchoolDetails :  IEquatable<SchoolDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchoolDetails" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all schools on Platform.</param>
        /// <param name="name">Name of the school.</param>
        /// <param name="urn">Unique Reference Number (URN) of the school.</param>
        /// <param name="laCode">The code of the local authority that the school belongs to.</param>
        /// <param name="laName">The name of the local authority that the school belongs to.</param>
        /// <param name="establishmentNumber">The school&#39;s establishment or &#39;DfE number&#39;.</param>
        /// <param name="establishmentType">The type of establishment.</param>
        /// <param name="phase">The phase of the school (i.e. &#39;Secondary&#39;, &#39;Primary&#39; or &#39;All through&#39;).</param>
        /// <param name="street">The street that the school is on.</param>
        /// <param name="town">The town that the school is in.</param>
        /// <param name="postcode">The postcode of the school.</param>
        /// <param name="headTeacher">The school&#39;s head teacher name.</param>
        public SchoolDetails(string _object = default(string), int? id = default(int?), string name = default(string), string urn = default(string), string laCode = default(string), string laName = default(string), string establishmentNumber = default(string), string establishmentType = default(string), string phase = default(string), string street = default(string), string town = default(string), string postcode = default(string), string headTeacher = default(string))
        {
            this._object = _object;
            this.id = id;
            this.name = name;
            this.urn = urn;
            this.la_code = laCode;
            this.la_name = laName;
            this.establishment_number = establishmentNumber;
            this.establishment_type = establishmentType;
            this.phase = phase;
            this.street = street;
            this.town = town;
            this.postcode = postcode;
            this.head_teacher = headTeacher;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to all schools on Platform
        /// </summary>
        /// <value>Internal stable ID given to all schools on Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// Name of the school
        /// </summary>
        /// <value>Name of the school</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// Unique Reference Number (URN) of the school
        /// </summary>
        /// <value>Unique Reference Number (URN) of the school</value>
        [DataMember(Name="urn", EmitDefaultValue=false)]
        public string urn { get; set; }

        /// <summary>
        /// The code of the local authority that the school belongs to
        /// </summary>
        /// <value>The code of the local authority that the school belongs to</value>
        [DataMember(Name="la_code", EmitDefaultValue=false)]
        public string la_code { get; set; }

        /// <summary>
        /// The name of the local authority that the school belongs to
        /// </summary>
        /// <value>The name of the local authority that the school belongs to</value>
        [DataMember(Name="la_name", EmitDefaultValue=false)]
        public string la_name { get; set; }

        /// <summary>
        /// The school&#39;s establishment or &#39;DfE number&#39;
        /// </summary>
        /// <value>The school&#39;s establishment or &#39;DfE number&#39;</value>
        [DataMember(Name="establishment_number", EmitDefaultValue=false)]
        public string establishment_number { get; set; }

        /// <summary>
        /// The type of establishment
        /// </summary>
        /// <value>The type of establishment</value>
        [DataMember(Name="establishment_type", EmitDefaultValue=false)]
        public string establishment_type { get; set; }

        /// <summary>
        /// The phase of the school (i.e. &#39;Secondary&#39;, &#39;Primary&#39; or &#39;All through&#39;)
        /// </summary>
        /// <value>The phase of the school (i.e. &#39;Secondary&#39;, &#39;Primary&#39; or &#39;All through&#39;)</value>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public string phase { get; set; }

        /// <summary>
        /// The street that the school is on
        /// </summary>
        /// <value>The street that the school is on</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string street { get; set; }

        /// <summary>
        /// The town that the school is in
        /// </summary>
        /// <value>The town that the school is in</value>
        [DataMember(Name="town", EmitDefaultValue=false)]
        public string town { get; set; }

        /// <summary>
        /// The postcode of the school
        /// </summary>
        /// <value>The postcode of the school</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string postcode { get; set; }

        /// <summary>
        /// The school&#39;s head teacher name
        /// </summary>
        /// <value>The school&#39;s head teacher name</value>
        [DataMember(Name="head_teacher", EmitDefaultValue=false)]
        public string head_teacher { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchoolDetails {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  urn: ").Append(urn).Append("\n");
            sb.Append("  la_code: ").Append(la_code).Append("\n");
            sb.Append("  la_name: ").Append(la_name).Append("\n");
            sb.Append("  establishment_number: ").Append(establishment_number).Append("\n");
            sb.Append("  establishment_type: ").Append(establishment_type).Append("\n");
            sb.Append("  phase: ").Append(phase).Append("\n");
            sb.Append("  street: ").Append(street).Append("\n");
            sb.Append("  town: ").Append(town).Append("\n");
            sb.Append("  postcode: ").Append(postcode).Append("\n");
            sb.Append("  head_teacher: ").Append(head_teacher).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchoolDetails);
        }

        /// <summary>
        /// Returns true if SchoolDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of SchoolDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchoolDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.urn == input.urn ||
                    (this.urn != null &&
                    this.urn.Equals(input.urn))
                ) && 
                (
                    this.la_code == input.la_code ||
                    (this.la_code != null &&
                    this.la_code.Equals(input.la_code))
                ) && 
                (
                    this.la_name == input.la_name ||
                    (this.la_name != null &&
                    this.la_name.Equals(input.la_name))
                ) && 
                (
                    this.establishment_number == input.establishment_number ||
                    (this.establishment_number != null &&
                    this.establishment_number.Equals(input.establishment_number))
                ) && 
                (
                    this.establishment_type == input.establishment_type ||
                    (this.establishment_type != null &&
                    this.establishment_type.Equals(input.establishment_type))
                ) && 
                (
                    this.phase == input.phase ||
                    (this.phase != null &&
                    this.phase.Equals(input.phase))
                ) && 
                (
                    this.street == input.street ||
                    (this.street != null &&
                    this.street.Equals(input.street))
                ) && 
                (
                    this.town == input.town ||
                    (this.town != null &&
                    this.town.Equals(input.town))
                ) && 
                (
                    this.postcode == input.postcode ||
                    (this.postcode != null &&
                    this.postcode.Equals(input.postcode))
                ) && 
                (
                    this.head_teacher == input.head_teacher ||
                    (this.head_teacher != null &&
                    this.head_teacher.Equals(input.head_teacher))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.urn != null)
                    hashCode = hashCode * 59 + this.urn.GetHashCode();
                if (this.la_code != null)
                    hashCode = hashCode * 59 + this.la_code.GetHashCode();
                if (this.la_name != null)
                    hashCode = hashCode * 59 + this.la_name.GetHashCode();
                if (this.establishment_number != null)
                    hashCode = hashCode * 59 + this.establishment_number.GetHashCode();
                if (this.establishment_type != null)
                    hashCode = hashCode * 59 + this.establishment_type.GetHashCode();
                if (this.phase != null)
                    hashCode = hashCode * 59 + this.phase.GetHashCode();
                if (this.street != null)
                    hashCode = hashCode * 59 + this.street.GetHashCode();
                if (this.town != null)
                    hashCode = hashCode * 59 + this.town.GetHashCode();
                if (this.postcode != null)
                    hashCode = hashCode * 59 + this.postcode.GetHashCode();
                if (this.head_teacher != null)
                    hashCode = hashCode * 59 + this.head_teacher.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
