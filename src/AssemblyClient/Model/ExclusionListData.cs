/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// The exclusions resource details official exclusions from a school.
    /// </summary>
    [DataContract]
    public partial class ExclusionListData :  IEquatable<ExclusionListData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExclusionListData" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all exclusions on the Platform.</param>
        /// <param name="studentId">The ID of the student that the exclusion is attached to.</param>
        /// <param name="exclusionType">The exclusions type.</param>
        /// <param name="exclusionsReason">The exclusion reason.</param>
        /// <param name="startDate">The date on which the exclusions starts.</param>
        /// <param name="startSession">The session in which the exclusion starts.</param>
        /// <param name="endDate">The date on which the exclusion ends.</param>
        /// <param name="endSession">The session (AM/PM) in which the exclusion ends.</param>
        /// <param name="exclusionLength">The total length, in sessions, of the exclusion.</param>
        public ExclusionListData(string _object = default(string), int? id = default(int?), int? studentId = default(int?), string exclusionType = default(string), string exclusionsReason = default(string), string startDate = default(string), string startSession = default(string), string endDate = default(string), string endSession = default(string), int? exclusionLength = default(int?))
        {
            this.Object = _object;
            this.Id = id;
            this.StudentId = studentId;
            this.ExclusionType = exclusionType;
            this.ExclusionsReason = exclusionsReason;
            this.StartDate = startDate;
            this.StartSession = startSession;
            this.EndDate = endDate;
            this.EndSession = endSession;
            this.ExclusionLength = exclusionLength;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// Internal stable ID given to all exclusions on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all exclusions on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The ID of the student that the exclusion is attached to
        /// </summary>
        /// <value>The ID of the student that the exclusion is attached to</value>
        [DataMember(Name="student_id", EmitDefaultValue=false)]
        public int? StudentId { get; set; }

        /// <summary>
        /// The exclusions type
        /// </summary>
        /// <value>The exclusions type</value>
        [DataMember(Name="exclusion_type", EmitDefaultValue=false)]
        public string ExclusionType { get; set; }

        /// <summary>
        /// The exclusion reason
        /// </summary>
        /// <value>The exclusion reason</value>
        [DataMember(Name="exclusions_reason", EmitDefaultValue=false)]
        public string ExclusionsReason { get; set; }

        /// <summary>
        /// The date on which the exclusions starts
        /// </summary>
        /// <value>The date on which the exclusions starts</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// The session in which the exclusion starts
        /// </summary>
        /// <value>The session in which the exclusion starts</value>
        [DataMember(Name="start_session", EmitDefaultValue=false)]
        public string StartSession { get; set; }

        /// <summary>
        /// The date on which the exclusion ends
        /// </summary>
        /// <value>The date on which the exclusion ends</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The session (AM/PM) in which the exclusion ends
        /// </summary>
        /// <value>The session (AM/PM) in which the exclusion ends</value>
        [DataMember(Name="end_session", EmitDefaultValue=false)]
        public string EndSession { get; set; }

        /// <summary>
        /// The total length, in sessions, of the exclusion
        /// </summary>
        /// <value>The total length, in sessions, of the exclusion</value>
        [DataMember(Name="exclusion_length", EmitDefaultValue=false)]
        public int? ExclusionLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExclusionListData {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  ExclusionType: ").Append(ExclusionType).Append("\n");
            sb.Append("  ExclusionsReason: ").Append(ExclusionsReason).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartSession: ").Append(StartSession).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndSession: ").Append(EndSession).Append("\n");
            sb.Append("  ExclusionLength: ").Append(ExclusionLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExclusionListData);
        }

        /// <summary>
        /// Returns true if ExclusionListData instances are equal
        /// </summary>
        /// <param name="input">Instance of ExclusionListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExclusionListData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StudentId == input.StudentId ||
                    (this.StudentId != null &&
                    this.StudentId.Equals(input.StudentId))
                ) && 
                (
                    this.ExclusionType == input.ExclusionType ||
                    (this.ExclusionType != null &&
                    this.ExclusionType.Equals(input.ExclusionType))
                ) && 
                (
                    this.ExclusionsReason == input.ExclusionsReason ||
                    (this.ExclusionsReason != null &&
                    this.ExclusionsReason.Equals(input.ExclusionsReason))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.StartSession == input.StartSession ||
                    (this.StartSession != null &&
                    this.StartSession.Equals(input.StartSession))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EndSession == input.EndSession ||
                    (this.EndSession != null &&
                    this.EndSession.Equals(input.EndSession))
                ) && 
                (
                    this.ExclusionLength == input.ExclusionLength ||
                    (this.ExclusionLength != null &&
                    this.ExclusionLength.Equals(input.ExclusionLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StudentId != null)
                    hashCode = hashCode * 59 + this.StudentId.GetHashCode();
                if (this.ExclusionType != null)
                    hashCode = hashCode * 59 + this.ExclusionType.GetHashCode();
                if (this.ExclusionsReason != null)
                    hashCode = hashCode * 59 + this.ExclusionsReason.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartSession != null)
                    hashCode = hashCode * 59 + this.StartSession.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EndSession != null)
                    hashCode = hashCode * 59 + this.EndSession.GetHashCode();
                if (this.ExclusionLength != null)
                    hashCode = hashCode * 59 + this.ExclusionLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
