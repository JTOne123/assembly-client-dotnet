/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// An assessment point represents a point in the school key stage, year, term or half-term that results can be attached to.
    /// </summary>
    [DataContract]
    public partial class AssessmentPoint :  IEquatable<AssessmentPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentPoint" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="rank">A stable number consistently assigned to assessment points across all environments. This field should be used to send results back to the Platform.</param>
        /// <param name="name">The name of the assessment point.</param>
        /// <param name="type">The time period that the assessment point relates to. This can be an entire key stage, an entire year, or a single term or half-term.</param>
        /// <param name="yearCode">This field ties an assessment point to a year group..</param>
        public AssessmentPoint(string _object = default(string), int? rank = default(int?), string name = default(string), string type = default(string), string yearCode = default(string))
        {
            this._object = _object;
            this.rank = rank;
            this.name = name;
            this.type = type;
            this.year_code = yearCode;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// A stable number consistently assigned to assessment points across all environments. This field should be used to send results back to the Platform
        /// </summary>
        /// <value>A stable number consistently assigned to assessment points across all environments. This field should be used to send results back to the Platform</value>
        [DataMember(Name="rank", EmitDefaultValue=false)]
        public int? rank { get; set; }

        /// <summary>
        /// The name of the assessment point
        /// </summary>
        /// <value>The name of the assessment point</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The time period that the assessment point relates to. This can be an entire key stage, an entire year, or a single term or half-term
        /// </summary>
        /// <value>The time period that the assessment point relates to. This can be an entire key stage, an entire year, or a single term or half-term</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string type { get; set; }

        /// <summary>
        /// This field ties an assessment point to a year group.
        /// </summary>
        /// <value>This field ties an assessment point to a year group.</value>
        [DataMember(Name="year_code", EmitDefaultValue=false)]
        public string year_code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssessmentPoint {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  rank: ").Append(rank).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  year_code: ").Append(year_code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssessmentPoint);
        }

        /// <summary>
        /// Returns true if AssessmentPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of AssessmentPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssessmentPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.rank == input.rank ||
                    (this.rank != null &&
                    this.rank.Equals(input.rank))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.year_code == input.year_code ||
                    (this.year_code != null &&
                    this.year_code.Equals(input.year_code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.rank != null)
                    hashCode = hashCode * 59 + this.rank.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.year_code != null)
                    hashCode = hashCode * 59 + this.year_code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
