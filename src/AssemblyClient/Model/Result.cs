/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyClient.Client.OpenAPIDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Result
    /// </summary>
    [DataContract]
    public partial class Result :  IEquatable<Result>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="studentId">studentId.</param>
        /// <param name="subjectId">subjectId.</param>
        /// <param name="assessmentId">assessmentId.</param>
        /// <param name="assessmentPointRank">assessmentPointRank.</param>
        /// <param name="facetId">facetId.</param>
        /// <param name="gradeId">gradeId.</param>
        /// <param name="resultDate">resultDate.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Result(int? id = default(int?), int? studentId = default(int?), int? subjectId = default(int?), int? assessmentId = default(int?), int? assessmentPointRank = default(int?), int? facetId = default(int?), int? gradeId = default(int?), DateTime? resultDate = default(DateTime?), DateTime? createdAt = default(DateTime?), DateTime? updatedAt = default(DateTime?))
        {
            this.Id = id;
            this.StudentId = studentId;
            this.SubjectId = subjectId;
            this.AssessmentId = assessmentId;
            this.AssessmentPointRank = assessmentPointRank;
            this.FacetId = facetId;
            this.GradeId = gradeId;
            this.ResultDate = resultDate;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="student_id", EmitDefaultValue=false)]
        public int? StudentId { get; set; }

        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name="subject_id", EmitDefaultValue=false)]
        public int? SubjectId { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentId
        /// </summary>
        [DataMember(Name="assessment_id", EmitDefaultValue=false)]
        public int? AssessmentId { get; set; }

        /// <summary>
        /// Gets or Sets AssessmentPointRank
        /// </summary>
        [DataMember(Name="assessment_point_rank", EmitDefaultValue=false)]
        public int? AssessmentPointRank { get; set; }

        /// <summary>
        /// Gets or Sets FacetId
        /// </summary>
        [DataMember(Name="facet_id", EmitDefaultValue=false)]
        public int? FacetId { get; set; }

        /// <summary>
        /// Gets or Sets GradeId
        /// </summary>
        [DataMember(Name="grade_id", EmitDefaultValue=false)]
        public int? GradeId { get; set; }

        /// <summary>
        /// Gets or Sets ResultDate
        /// </summary>
        [DataMember(Name="result_date", EmitDefaultValue=false)]
        public DateTime? ResultDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  AssessmentId: ").Append(AssessmentId).Append("\n");
            sb.Append("  AssessmentPointRank: ").Append(AssessmentPointRank).Append("\n");
            sb.Append("  FacetId: ").Append(FacetId).Append("\n");
            sb.Append("  GradeId: ").Append(GradeId).Append("\n");
            sb.Append("  ResultDate: ").Append(ResultDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Result);
        }

        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="input">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StudentId == input.StudentId ||
                    (this.StudentId != null &&
                    this.StudentId.Equals(input.StudentId))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.AssessmentId == input.AssessmentId ||
                    (this.AssessmentId != null &&
                    this.AssessmentId.Equals(input.AssessmentId))
                ) && 
                (
                    this.AssessmentPointRank == input.AssessmentPointRank ||
                    (this.AssessmentPointRank != null &&
                    this.AssessmentPointRank.Equals(input.AssessmentPointRank))
                ) && 
                (
                    this.FacetId == input.FacetId ||
                    (this.FacetId != null &&
                    this.FacetId.Equals(input.FacetId))
                ) && 
                (
                    this.GradeId == input.GradeId ||
                    (this.GradeId != null &&
                    this.GradeId.Equals(input.GradeId))
                ) && 
                (
                    this.ResultDate == input.ResultDate ||
                    (this.ResultDate != null &&
                    this.ResultDate.Equals(input.ResultDate))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StudentId != null)
                    hashCode = hashCode * 59 + this.StudentId.GetHashCode();
                if (this.SubjectId != null)
                    hashCode = hashCode * 59 + this.SubjectId.GetHashCode();
                if (this.AssessmentId != null)
                    hashCode = hashCode * 59 + this.AssessmentId.GetHashCode();
                if (this.AssessmentPointRank != null)
                    hashCode = hashCode * 59 + this.AssessmentPointRank.GetHashCode();
                if (this.FacetId != null)
                    hashCode = hashCode * 59 + this.FacetId.GetHashCode();
                if (this.GradeId != null)
                    hashCode = hashCode * 59 + this.GradeId.GetHashCode();
                if (this.ResultDate != null)
                    hashCode = hashCode * 59 + this.ResultDate.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
