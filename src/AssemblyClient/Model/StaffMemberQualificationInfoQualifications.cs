/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// No description
    /// </summary>
    [DataContract]
    public partial class StaffMemberQualificationInfoQualifications :  IEquatable<StaffMemberQualificationInfoQualifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffMemberQualificationInfoQualifications" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all staff qualifications on the Platform.</param>
        /// <param name="qualificationCode">A code describing the type of qualification .</param>
        /// <param name="degreeClass">Identifies the result of the qualification.</param>
        /// <param name="firstSubjectCode">A code identifying the main or joint main subject of the qualification.</param>
        /// <param name="firstSubjectName">The name of the subject.</param>
        /// <param name="secondSubjectCode">A code identifying the main or joint main subject of the qualification.</param>
        /// <param name="secondSubjectName">The name of the subject.</param>
        public StaffMemberQualificationInfoQualifications(string _object = default(string), int? id = default(int?), string qualificationCode = default(string), string degreeClass = default(string), string firstSubjectCode = default(string), string firstSubjectName = default(string), string secondSubjectCode = default(string), string secondSubjectName = default(string))
        {
            this.Object = _object;
            this.Id = id;
            this.QualificationCode = qualificationCode;
            this.DegreeClass = degreeClass;
            this.FirstSubjectCode = firstSubjectCode;
            this.FirstSubjectName = firstSubjectName;
            this.SecondSubjectCode = secondSubjectCode;
            this.SecondSubjectName = secondSubjectName;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// Internal stable ID given to all staff qualifications on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all staff qualifications on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// A code describing the type of qualification 
        /// </summary>
        /// <value>A code describing the type of qualification </value>
        [DataMember(Name="qualification_code", EmitDefaultValue=false)]
        public string QualificationCode { get; set; }

        /// <summary>
        /// Identifies the result of the qualification
        /// </summary>
        /// <value>Identifies the result of the qualification</value>
        [DataMember(Name="degree_class", EmitDefaultValue=false)]
        public string DegreeClass { get; set; }

        /// <summary>
        /// A code identifying the main or joint main subject of the qualification
        /// </summary>
        /// <value>A code identifying the main or joint main subject of the qualification</value>
        [DataMember(Name="first_subject_code", EmitDefaultValue=false)]
        public string FirstSubjectCode { get; set; }

        /// <summary>
        /// The name of the subject
        /// </summary>
        /// <value>The name of the subject</value>
        [DataMember(Name="first_subject_name", EmitDefaultValue=false)]
        public string FirstSubjectName { get; set; }

        /// <summary>
        /// A code identifying the main or joint main subject of the qualification
        /// </summary>
        /// <value>A code identifying the main or joint main subject of the qualification</value>
        [DataMember(Name="second_subject_code", EmitDefaultValue=false)]
        public string SecondSubjectCode { get; set; }

        /// <summary>
        /// The name of the subject
        /// </summary>
        /// <value>The name of the subject</value>
        [DataMember(Name="second_subject_name", EmitDefaultValue=false)]
        public string SecondSubjectName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffMemberQualificationInfoQualifications {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QualificationCode: ").Append(QualificationCode).Append("\n");
            sb.Append("  DegreeClass: ").Append(DegreeClass).Append("\n");
            sb.Append("  FirstSubjectCode: ").Append(FirstSubjectCode).Append("\n");
            sb.Append("  FirstSubjectName: ").Append(FirstSubjectName).Append("\n");
            sb.Append("  SecondSubjectCode: ").Append(SecondSubjectCode).Append("\n");
            sb.Append("  SecondSubjectName: ").Append(SecondSubjectName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffMemberQualificationInfoQualifications);
        }

        /// <summary>
        /// Returns true if StaffMemberQualificationInfoQualifications instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffMemberQualificationInfoQualifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffMemberQualificationInfoQualifications input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.QualificationCode == input.QualificationCode ||
                    (this.QualificationCode != null &&
                    this.QualificationCode.Equals(input.QualificationCode))
                ) && 
                (
                    this.DegreeClass == input.DegreeClass ||
                    (this.DegreeClass != null &&
                    this.DegreeClass.Equals(input.DegreeClass))
                ) && 
                (
                    this.FirstSubjectCode == input.FirstSubjectCode ||
                    (this.FirstSubjectCode != null &&
                    this.FirstSubjectCode.Equals(input.FirstSubjectCode))
                ) && 
                (
                    this.FirstSubjectName == input.FirstSubjectName ||
                    (this.FirstSubjectName != null &&
                    this.FirstSubjectName.Equals(input.FirstSubjectName))
                ) && 
                (
                    this.SecondSubjectCode == input.SecondSubjectCode ||
                    (this.SecondSubjectCode != null &&
                    this.SecondSubjectCode.Equals(input.SecondSubjectCode))
                ) && 
                (
                    this.SecondSubjectName == input.SecondSubjectName ||
                    (this.SecondSubjectName != null &&
                    this.SecondSubjectName.Equals(input.SecondSubjectName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.QualificationCode != null)
                    hashCode = hashCode * 59 + this.QualificationCode.GetHashCode();
                if (this.DegreeClass != null)
                    hashCode = hashCode * 59 + this.DegreeClass.GetHashCode();
                if (this.FirstSubjectCode != null)
                    hashCode = hashCode * 59 + this.FirstSubjectCode.GetHashCode();
                if (this.FirstSubjectName != null)
                    hashCode = hashCode * 59 + this.FirstSubjectName.GetHashCode();
                if (this.SecondSubjectCode != null)
                    hashCode = hashCode * 59 + this.SecondSubjectCode.GetHashCode();
                if (this.SecondSubjectName != null)
                    hashCode = hashCode * 59 + this.SecondSubjectName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
