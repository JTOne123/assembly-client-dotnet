/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Response object for update Result request
    /// </summary>
    [DataContract]
    public partial class UpdateResultResponse :  IEquatable<UpdateResultResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateResultResponse" /> class.
        /// </summary>
        /// <param name="message">No description.</param>
        /// <param name="updatedFields">No description.</param>
        public UpdateResultResponse(string message = default(string), List<string> updatedFields = default(List<string>))
        {
            this.message = message;
            this.updated_fields = updatedFields;
        }
        
        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string message { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="updated_fields", EmitDefaultValue=false)]
        public List<string> updated_fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateResultResponse {\n");
            sb.Append("  message: ").Append(message).Append("\n");
            sb.Append("  updated_fields: ").Append(updated_fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateResultResponse);
        }

        /// <summary>
        /// Returns true if UpdateResultResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateResultResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateResultResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.message == input.message ||
                    (this.message != null &&
                    this.message.Equals(input.message))
                ) && 
                (
                    this.updated_fields == input.updated_fields ||
                    this.updated_fields != null &&
                    this.updated_fields.SequenceEqual(input.updated_fields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.message != null)
                    hashCode = hashCode * 59 + this.message.GetHashCode();
                if (this.updated_fields != null)
                    hashCode = hashCode * 59 + this.updated_fields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
