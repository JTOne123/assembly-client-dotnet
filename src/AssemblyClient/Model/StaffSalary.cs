/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyClient.Client.OpenAPIDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// StaffSalary
    /// </summary>
    [DataContract]
    public partial class StaffSalary :  IEquatable<StaffSalary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffSalary" /> class.
        /// </summary>
        /// <param name="hoursPerWeek">hoursPerWeek.</param>
        /// <param name="fte">fte.</param>
        /// <param name="weeksPerYear">weeksPerYear.</param>
        /// <param name="payRange">payRange.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="payScaleFramework">payScaleFramework.</param>
        /// <param name="regionalSpine">regionalSpine.</param>
        /// <param name="basePay">basePay.</param>
        /// <param name="actualPay">actualPay.</param>
        /// <param name="safeguardedSalary">safeguardedSalary.</param>
        public StaffSalary(string hoursPerWeek = default(string), string fte = default(string), string weeksPerYear = default(string), string payRange = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string payScaleFramework = default(string), string regionalSpine = default(string), string basePay = default(string), string actualPay = default(string), bool? safeguardedSalary = default(bool?))
        {
            this.HoursPerWeek = hoursPerWeek;
            this.Fte = fte;
            this.WeeksPerYear = weeksPerYear;
            this.PayRange = payRange;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.PayScaleFramework = payScaleFramework;
            this.RegionalSpine = regionalSpine;
            this.BasePay = basePay;
            this.ActualPay = actualPay;
            this.SafeguardedSalary = safeguardedSalary;
        }
        
        /// <summary>
        /// Gets or Sets HoursPerWeek
        /// </summary>
        [DataMember(Name="hours_per_week", EmitDefaultValue=false)]
        public string HoursPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets Fte
        /// </summary>
        [DataMember(Name="fte", EmitDefaultValue=false)]
        public string Fte { get; set; }

        /// <summary>
        /// Gets or Sets WeeksPerYear
        /// </summary>
        [DataMember(Name="weeks_per_year", EmitDefaultValue=false)]
        public string WeeksPerYear { get; set; }

        /// <summary>
        /// Gets or Sets PayRange
        /// </summary>
        [DataMember(Name="pay_range", EmitDefaultValue=false)]
        public string PayRange { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets PayScaleFramework
        /// </summary>
        [DataMember(Name="pay_scale_framework", EmitDefaultValue=false)]
        public string PayScaleFramework { get; set; }

        /// <summary>
        /// Gets or Sets RegionalSpine
        /// </summary>
        [DataMember(Name="regional_spine", EmitDefaultValue=false)]
        public string RegionalSpine { get; set; }

        /// <summary>
        /// Gets or Sets BasePay
        /// </summary>
        [DataMember(Name="base_pay", EmitDefaultValue=false)]
        public string BasePay { get; set; }

        /// <summary>
        /// Gets or Sets ActualPay
        /// </summary>
        [DataMember(Name="actual_pay", EmitDefaultValue=false)]
        public string ActualPay { get; set; }

        /// <summary>
        /// Gets or Sets SafeguardedSalary
        /// </summary>
        [DataMember(Name="safeguarded_salary", EmitDefaultValue=false)]
        public bool? SafeguardedSalary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffSalary {\n");
            sb.Append("  HoursPerWeek: ").Append(HoursPerWeek).Append("\n");
            sb.Append("  Fte: ").Append(Fte).Append("\n");
            sb.Append("  WeeksPerYear: ").Append(WeeksPerYear).Append("\n");
            sb.Append("  PayRange: ").Append(PayRange).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  PayScaleFramework: ").Append(PayScaleFramework).Append("\n");
            sb.Append("  RegionalSpine: ").Append(RegionalSpine).Append("\n");
            sb.Append("  BasePay: ").Append(BasePay).Append("\n");
            sb.Append("  ActualPay: ").Append(ActualPay).Append("\n");
            sb.Append("  SafeguardedSalary: ").Append(SafeguardedSalary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffSalary);
        }

        /// <summary>
        /// Returns true if StaffSalary instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffSalary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffSalary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HoursPerWeek == input.HoursPerWeek ||
                    (this.HoursPerWeek != null &&
                    this.HoursPerWeek.Equals(input.HoursPerWeek))
                ) && 
                (
                    this.Fte == input.Fte ||
                    (this.Fte != null &&
                    this.Fte.Equals(input.Fte))
                ) && 
                (
                    this.WeeksPerYear == input.WeeksPerYear ||
                    (this.WeeksPerYear != null &&
                    this.WeeksPerYear.Equals(input.WeeksPerYear))
                ) && 
                (
                    this.PayRange == input.PayRange ||
                    (this.PayRange != null &&
                    this.PayRange.Equals(input.PayRange))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.PayScaleFramework == input.PayScaleFramework ||
                    (this.PayScaleFramework != null &&
                    this.PayScaleFramework.Equals(input.PayScaleFramework))
                ) && 
                (
                    this.RegionalSpine == input.RegionalSpine ||
                    (this.RegionalSpine != null &&
                    this.RegionalSpine.Equals(input.RegionalSpine))
                ) && 
                (
                    this.BasePay == input.BasePay ||
                    (this.BasePay != null &&
                    this.BasePay.Equals(input.BasePay))
                ) && 
                (
                    this.ActualPay == input.ActualPay ||
                    (this.ActualPay != null &&
                    this.ActualPay.Equals(input.ActualPay))
                ) && 
                (
                    this.SafeguardedSalary == input.SafeguardedSalary ||
                    (this.SafeguardedSalary != null &&
                    this.SafeguardedSalary.Equals(input.SafeguardedSalary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HoursPerWeek != null)
                    hashCode = hashCode * 59 + this.HoursPerWeek.GetHashCode();
                if (this.Fte != null)
                    hashCode = hashCode * 59 + this.Fte.GetHashCode();
                if (this.WeeksPerYear != null)
                    hashCode = hashCode * 59 + this.WeeksPerYear.GetHashCode();
                if (this.PayRange != null)
                    hashCode = hashCode * 59 + this.PayRange.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.PayScaleFramework != null)
                    hashCode = hashCode * 59 + this.PayScaleFramework.GetHashCode();
                if (this.RegionalSpine != null)
                    hashCode = hashCode * 59 + this.RegionalSpine.GetHashCode();
                if (this.BasePay != null)
                    hashCode = hashCode * 59 + this.BasePay.GetHashCode();
                if (this.ActualPay != null)
                    hashCode = hashCode * 59 + this.ActualPay.GetHashCode();
                if (this.SafeguardedSalary != null)
                    hashCode = hashCode * 59 + this.SafeguardedSalary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
