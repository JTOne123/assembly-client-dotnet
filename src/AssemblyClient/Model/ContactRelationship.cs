/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// A student contact relationship object represents the relationship between a student and a contact.
    /// </summary>
    [DataContract]
    public partial class ContactRelationship :  IEquatable<ContactRelationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRelationship" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="relationshipType">The relationship between the contact and the student.</param>
        /// <param name="priority">The priority of this contact for the student.</param>
        /// <param name="parentalResponsibility">Indicates whether the contact has parental responsibility for the student.</param>
        public ContactRelationship(string _object = default(string), string relationshipType = default(string), int? priority = default(int?), bool? parentalResponsibility = default(bool?))
        {
            this._object = _object;
            this.relationship_type = relationshipType;
            this.priority = priority;
            this.parental_responsibility = parentalResponsibility;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// The relationship between the contact and the student
        /// </summary>
        /// <value>The relationship between the contact and the student</value>
        [DataMember(Name="relationship_type", EmitDefaultValue=false)]
        public string relationship_type { get; set; }

        /// <summary>
        /// The priority of this contact for the student
        /// </summary>
        /// <value>The priority of this contact for the student</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? priority { get; set; }

        /// <summary>
        /// Indicates whether the contact has parental responsibility for the student
        /// </summary>
        /// <value>Indicates whether the contact has parental responsibility for the student</value>
        [DataMember(Name="parental_responsibility", EmitDefaultValue=false)]
        public bool? parental_responsibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactRelationship {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  relationship_type: ").Append(relationship_type).Append("\n");
            sb.Append("  priority: ").Append(priority).Append("\n");
            sb.Append("  parental_responsibility: ").Append(parental_responsibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactRelationship);
        }

        /// <summary>
        /// Returns true if ContactRelationship instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactRelationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.relationship_type == input.relationship_type ||
                    (this.relationship_type != null &&
                    this.relationship_type.Equals(input.relationship_type))
                ) && 
                (
                    this.priority == input.priority ||
                    (this.priority != null &&
                    this.priority.Equals(input.priority))
                ) && 
                (
                    this.parental_responsibility == input.parental_responsibility ||
                    (this.parental_responsibility != null &&
                    this.parental_responsibility.Equals(input.parental_responsibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.relationship_type != null)
                    hashCode = hashCode * 59 + this.relationship_type.GetHashCode();
                if (this.priority != null)
                    hashCode = hashCode * 59 + this.priority.GetHashCode();
                if (this.parental_responsibility != null)
                    hashCode = hashCode * 59 + this.parental_responsibility.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
