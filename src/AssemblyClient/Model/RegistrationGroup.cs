/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// A registration group object represents the grouping in which students take AM/PM roll call (morning and afternoon registers).
    /// </summary>
    [DataContract]
    public partial class RegistrationGroup :  IEquatable<RegistrationGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationGroup" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all registration groups on the Platform.</param>
        /// <param name="name">Name of the registration group.</param>
        /// <param name="supervisorIds">The IDs of staff members associated with the registration group.</param>
        /// <param name="studentIds">The IDs of students associated with the registration group.</param>
        public RegistrationGroup(string _object = default(string), int? id = default(int?), string name = default(string), List<int?> supervisorIds = default(List<int?>), List<int?> studentIds = default(List<int?>))
        {
            this.Object = _object;
            this.Id = id;
            this.Name = name;
            this.SupervisorIds = supervisorIds;
            this.StudentIds = studentIds;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string Object { get; set; }

        /// <summary>
        /// Internal stable ID given to all registration groups on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all registration groups on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the registration group
        /// </summary>
        /// <value>Name of the registration group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of staff members associated with the registration group
        /// </summary>
        /// <value>The IDs of staff members associated with the registration group</value>
        [DataMember(Name="supervisor_ids", EmitDefaultValue=false)]
        public List<int?> SupervisorIds { get; set; }

        /// <summary>
        /// The IDs of students associated with the registration group
        /// </summary>
        /// <value>The IDs of students associated with the registration group</value>
        [DataMember(Name="student_ids", EmitDefaultValue=false)]
        public List<int?> StudentIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationGroup {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupervisorIds: ").Append(SupervisorIds).Append("\n");
            sb.Append("  StudentIds: ").Append(StudentIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationGroup);
        }

        /// <summary>
        /// Returns true if RegistrationGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Object == input.Object ||
                    (this.Object != null &&
                    this.Object.Equals(input.Object))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupervisorIds == input.SupervisorIds ||
                    this.SupervisorIds != null &&
                    this.SupervisorIds.SequenceEqual(input.SupervisorIds)
                ) && 
                (
                    this.StudentIds == input.StudentIds ||
                    this.StudentIds != null &&
                    this.StudentIds.SequenceEqual(input.StudentIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Object != null)
                    hashCode = hashCode * 59 + this.Object.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SupervisorIds != null)
                    hashCode = hashCode * 59 + this.SupervisorIds.GetHashCode();
                if (this.StudentIds != null)
                    hashCode = hashCode * 59 + this.StudentIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
