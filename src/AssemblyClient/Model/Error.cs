/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Error object.
    /// </summary>
    [DataContract]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="error">Summary of error.</param>
        /// <param name="message">A longer description of the error that occured, depending on the error..</param>
        /// <param name="data">data.</param>
        public Error(string error = default(string), string message = default(string), ErrorData data = default(ErrorData))
        {
            this._error = error;
            this.message = message;
            this.data = data;
        }
        
        /// <summary>
        /// Summary of error
        /// </summary>
        /// <value>Summary of error</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string _error { get; set; }

        /// <summary>
        /// A longer description of the error that occured, depending on the error.
        /// </summary>
        /// <value>A longer description of the error that occured, depending on the error.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string message { get; set; }

        /// <summary>
        /// Gets or Sets data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public ErrorData data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  _error: ").Append(_error).Append("\n");
            sb.Append("  message: ").Append(message).Append("\n");
            sb.Append("  data: ").Append(data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._error == input._error ||
                    (this._error != null &&
                    this._error.Equals(input._error))
                ) && 
                (
                    this.message == input.message ||
                    (this.message != null &&
                    this.message.Equals(input.message))
                ) && 
                (
                    this.data == input.data ||
                    (this.data != null &&
                    this.data.Equals(input.data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._error != null)
                    hashCode = hashCode * 59 + this._error.GetHashCode();
                if (this.message != null)
                    hashCode = hashCode * 59 + this.message.GetHashCode();
                if (this.data != null)
                    hashCode = hashCode * 59 + this.data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
