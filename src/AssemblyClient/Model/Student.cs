/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// A student object represents a single student within a school.
    /// </summary>
    [DataContract]
    public partial class Student :  IEquatable<Student>, IValidatableObject
    {
        /// <summary>
        /// The year group the student currently belongs to *Values*  |Value|Description| |- --|- --| |&#x60;N1&#x60;|Nursery first year| |&#x60;N2&#x60;|Nursery second year| |&#x60;R&#x60;|Reception| |&#x60;1&#x60;|Year 1| |&#x60;2&#x60;|Year 2| |&#x60;3&#x60;|Year 3| |&#x60;4&#x60;|Year 4| |&#x60;5&#x60;|Year 5| |&#x60;6&#x60;|Year 6| |&#x60;7&#x60;|Year 7| |&#x60;8&#x60;|Year 8| |&#x60;9&#x60;|Year 9| |&#x60;10&#x60;|Year 10| |&#x60;11&#x60;|Year 11| |&#x60;12&#x60;|Year 12| |&#x60;13&#x60;|Year 13| 
        /// </summary>
        /// <value>The year group the student currently belongs to *Values*  |Value|Description| |- --|- --| |&#x60;N1&#x60;|Nursery first year| |&#x60;N2&#x60;|Nursery second year| |&#x60;R&#x60;|Reception| |&#x60;1&#x60;|Year 1| |&#x60;2&#x60;|Year 2| |&#x60;3&#x60;|Year 3| |&#x60;4&#x60;|Year 4| |&#x60;5&#x60;|Year 5| |&#x60;6&#x60;|Year 6| |&#x60;7&#x60;|Year 7| |&#x60;8&#x60;|Year 8| |&#x60;9&#x60;|Year 9| |&#x60;10&#x60;|Year 10| |&#x60;11&#x60;|Year 11| |&#x60;12&#x60;|Year 12| |&#x60;13&#x60;|Year 13| </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum YearCodeEnum
        {
            
            /// <summary>
            /// Enum N1 for value: N1
            /// </summary>
            [EnumMember(Value = "N1")]
            N1 = 1,
            
            /// <summary>
            /// Enum N2 for value: N2
            /// </summary>
            [EnumMember(Value = "N2")]
            N2 = 2,
            
            /// <summary>
            /// Enum R for value: R
            /// </summary>
            [EnumMember(Value = "R")]
            R = 3,
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 4,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 5,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 6,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 7,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 8,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 9,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 10,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 11,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 12,
            
            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 13,
            
            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 14,
            
            /// <summary>
            /// Enum _12 for value: 12
            /// </summary>
            [EnumMember(Value = "12")]
            _12 = 15,
            
            /// <summary>
            /// Enum _13 for value: 13
            /// </summary>
            [EnumMember(Value = "13")]
            _13 = 16
        }

        /// <summary>
        /// The year group the student currently belongs to *Values*  |Value|Description| |- --|- --| |&#x60;N1&#x60;|Nursery first year| |&#x60;N2&#x60;|Nursery second year| |&#x60;R&#x60;|Reception| |&#x60;1&#x60;|Year 1| |&#x60;2&#x60;|Year 2| |&#x60;3&#x60;|Year 3| |&#x60;4&#x60;|Year 4| |&#x60;5&#x60;|Year 5| |&#x60;6&#x60;|Year 6| |&#x60;7&#x60;|Year 7| |&#x60;8&#x60;|Year 8| |&#x60;9&#x60;|Year 9| |&#x60;10&#x60;|Year 10| |&#x60;11&#x60;|Year 11| |&#x60;12&#x60;|Year 12| |&#x60;13&#x60;|Year 13| 
        /// </summary>
        /// <value>The year group the student currently belongs to *Values*  |Value|Description| |- --|- --| |&#x60;N1&#x60;|Nursery first year| |&#x60;N2&#x60;|Nursery second year| |&#x60;R&#x60;|Reception| |&#x60;1&#x60;|Year 1| |&#x60;2&#x60;|Year 2| |&#x60;3&#x60;|Year 3| |&#x60;4&#x60;|Year 4| |&#x60;5&#x60;|Year 5| |&#x60;6&#x60;|Year 6| |&#x60;7&#x60;|Year 7| |&#x60;8&#x60;|Year 8| |&#x60;9&#x60;|Year 9| |&#x60;10&#x60;|Year 10| |&#x60;11&#x60;|Year 11| |&#x60;12&#x60;|Year 12| |&#x60;13&#x60;|Year 13| </value>
        [DataMember(Name="year_code", EmitDefaultValue=false)]
        public YearCodeEnum? year_code { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Student" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to students in the Platform.</param>
        /// <param name="firstName">The first name of the student.</param>
        /// <param name="legalFirstName">The legal first name of the student.</param>
        /// <param name="middleName">The middle name of the student.</param>
        /// <param name="lastName">The last name of the student.</param>
        /// <param name="legalLastName">The legal last name of the student.</param>
        /// <param name="formerLastName">The former last name of the student.</param>
        /// <param name="dob">The date of birth of the student.</param>
        /// <param name="yearCode">The year group the student currently belongs to *Values*  |Value|Description| |- --|- --| |&#x60;N1&#x60;|Nursery first year| |&#x60;N2&#x60;|Nursery second year| |&#x60;R&#x60;|Reception| |&#x60;1&#x60;|Year 1| |&#x60;2&#x60;|Year 2| |&#x60;3&#x60;|Year 3| |&#x60;4&#x60;|Year 4| |&#x60;5&#x60;|Year 5| |&#x60;6&#x60;|Year 6| |&#x60;7&#x60;|Year 7| |&#x60;8&#x60;|Year 8| |&#x60;9&#x60;|Year 9| |&#x60;10&#x60;|Year 10| |&#x60;11&#x60;|Year 11| |&#x60;12&#x60;|Year 12| |&#x60;13&#x60;|Year 13| .</param>
        /// <param name="upn">Unique Pupil Number (UPN) - a DfE-mandated 13-character code that identifies each pupil.</param>
        /// <param name="formerUpn">The previous UPN where a pupil has held another UPN whilst at a school.</param>
        /// <param name="misId">The ID of a student from the MIS.</param>
        /// <param name="pan">A student&#39;s &#39;Pupil Admission Number&#39;. This field is exposed in the front end of the MIS, and may be the same as mis_id.</param>
        /// <param name="startDate">Date when the student joined the school.</param>
        /// <param name="endDate">Date when the student left the school (this will default to 2079-06-06T23:59:00.000Z).</param>
        /// <param name="enrolmentStatus">The enrolment status of the student.</param>
        /// <param name="demographics">demographics.</param>
        /// <param name="contact">List of contact IDs for the student..</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="languages">languages.</param>
        public Student(string _object = default(string), int? id = default(int?), string firstName = default(string), string legalFirstName = default(string), string middleName = default(string), string lastName = default(string), string legalLastName = default(string), string formerLastName = default(string), DateTime? dob = default(DateTime?), YearCodeEnum? yearCode = default(YearCodeEnum?), string upn = default(string), string formerUpn = default(string), string misId = default(string), string pan = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string enrolmentStatus = default(string), StudentDemographics demographics = default(StudentDemographics), List<ContactListData> contact = default(List<ContactListData>), StudentAddresses addresses = default(StudentAddresses), StudentLanguages languages = default(StudentLanguages))
        {
            this._object = _object;
            this.id = id;
            this.first_name = firstName;
            this.legal_first_name = legalFirstName;
            this.middle_name = middleName;
            this.last_name = lastName;
            this.legal_last_name = legalLastName;
            this.former_last_name = formerLastName;
            this.dob = dob;
            this.year_code = yearCode;
            this.upn = upn;
            this.former_upn = formerUpn;
            this.mis_id = misId;
            this.pan = pan;
            this.start_date = startDate;
            this.end_date = endDate;
            this.enrolment_status = enrolmentStatus;
            this.demographics = demographics;
            this.contact = contact;
            this.addresses = addresses;
            this.languages = languages;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to students in the Platform
        /// </summary>
        /// <value>Internal stable ID given to students in the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// The first name of the student
        /// </summary>
        /// <value>The first name of the student</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string first_name { get; set; }

        /// <summary>
        /// The legal first name of the student
        /// </summary>
        /// <value>The legal first name of the student</value>
        [DataMember(Name="legal_first_name", EmitDefaultValue=false)]
        public string legal_first_name { get; set; }

        /// <summary>
        /// The middle name of the student
        /// </summary>
        /// <value>The middle name of the student</value>
        [DataMember(Name="middle_name", EmitDefaultValue=false)]
        public string middle_name { get; set; }

        /// <summary>
        /// The last name of the student
        /// </summary>
        /// <value>The last name of the student</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string last_name { get; set; }

        /// <summary>
        /// The legal last name of the student
        /// </summary>
        /// <value>The legal last name of the student</value>
        [DataMember(Name="legal_last_name", EmitDefaultValue=false)]
        public string legal_last_name { get; set; }

        /// <summary>
        /// The former last name of the student
        /// </summary>
        /// <value>The former last name of the student</value>
        [DataMember(Name="former_last_name", EmitDefaultValue=false)]
        public string former_last_name { get; set; }

        /// <summary>
        /// The date of birth of the student
        /// </summary>
        /// <value>The date of birth of the student</value>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? dob { get; set; }


        /// <summary>
        /// Unique Pupil Number (UPN) - a DfE-mandated 13-character code that identifies each pupil
        /// </summary>
        /// <value>Unique Pupil Number (UPN) - a DfE-mandated 13-character code that identifies each pupil</value>
        [DataMember(Name="upn", EmitDefaultValue=false)]
        public string upn { get; set; }

        /// <summary>
        /// The previous UPN where a pupil has held another UPN whilst at a school
        /// </summary>
        /// <value>The previous UPN where a pupil has held another UPN whilst at a school</value>
        [DataMember(Name="former_upn", EmitDefaultValue=false)]
        public string former_upn { get; set; }

        /// <summary>
        /// The ID of a student from the MIS
        /// </summary>
        /// <value>The ID of a student from the MIS</value>
        [DataMember(Name="mis_id", EmitDefaultValue=false)]
        public string mis_id { get; set; }

        /// <summary>
        /// A student&#39;s &#39;Pupil Admission Number&#39;. This field is exposed in the front end of the MIS, and may be the same as mis_id
        /// </summary>
        /// <value>A student&#39;s &#39;Pupil Admission Number&#39;. This field is exposed in the front end of the MIS, and may be the same as mis_id</value>
        [DataMember(Name="pan", EmitDefaultValue=false)]
        public string pan { get; set; }

        /// <summary>
        /// Date when the student joined the school
        /// </summary>
        /// <value>Date when the student joined the school</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? start_date { get; set; }

        /// <summary>
        /// Date when the student left the school (this will default to 2079-06-06T23:59:00.000Z)
        /// </summary>
        /// <value>Date when the student left the school (this will default to 2079-06-06T23:59:00.000Z)</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? end_date { get; set; }

        /// <summary>
        /// The enrolment status of the student
        /// </summary>
        /// <value>The enrolment status of the student</value>
        [DataMember(Name="enrolment_status", EmitDefaultValue=false)]
        public string enrolment_status { get; set; }

        /// <summary>
        /// Gets or Sets demographics
        /// </summary>
        [DataMember(Name="demographics", EmitDefaultValue=false)]
        public StudentDemographics demographics { get; set; }

        /// <summary>
        /// List of contact IDs for the student.
        /// </summary>
        /// <value>List of contact IDs for the student.</value>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public List<ContactListData> contact { get; set; }

        /// <summary>
        /// Gets or Sets addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public StudentAddresses addresses { get; set; }

        /// <summary>
        /// Gets or Sets languages
        /// </summary>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public StudentLanguages languages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Student {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  first_name: ").Append(first_name).Append("\n");
            sb.Append("  legal_first_name: ").Append(legal_first_name).Append("\n");
            sb.Append("  middle_name: ").Append(middle_name).Append("\n");
            sb.Append("  last_name: ").Append(last_name).Append("\n");
            sb.Append("  legal_last_name: ").Append(legal_last_name).Append("\n");
            sb.Append("  former_last_name: ").Append(former_last_name).Append("\n");
            sb.Append("  dob: ").Append(dob).Append("\n");
            sb.Append("  year_code: ").Append(year_code).Append("\n");
            sb.Append("  upn: ").Append(upn).Append("\n");
            sb.Append("  former_upn: ").Append(former_upn).Append("\n");
            sb.Append("  mis_id: ").Append(mis_id).Append("\n");
            sb.Append("  pan: ").Append(pan).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  enrolment_status: ").Append(enrolment_status).Append("\n");
            sb.Append("  demographics: ").Append(demographics).Append("\n");
            sb.Append("  contact: ").Append(contact).Append("\n");
            sb.Append("  addresses: ").Append(addresses).Append("\n");
            sb.Append("  languages: ").Append(languages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Student);
        }

        /// <summary>
        /// Returns true if Student instances are equal
        /// </summary>
        /// <param name="input">Instance of Student to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Student input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.first_name == input.first_name ||
                    (this.first_name != null &&
                    this.first_name.Equals(input.first_name))
                ) && 
                (
                    this.legal_first_name == input.legal_first_name ||
                    (this.legal_first_name != null &&
                    this.legal_first_name.Equals(input.legal_first_name))
                ) && 
                (
                    this.middle_name == input.middle_name ||
                    (this.middle_name != null &&
                    this.middle_name.Equals(input.middle_name))
                ) && 
                (
                    this.last_name == input.last_name ||
                    (this.last_name != null &&
                    this.last_name.Equals(input.last_name))
                ) && 
                (
                    this.legal_last_name == input.legal_last_name ||
                    (this.legal_last_name != null &&
                    this.legal_last_name.Equals(input.legal_last_name))
                ) && 
                (
                    this.former_last_name == input.former_last_name ||
                    (this.former_last_name != null &&
                    this.former_last_name.Equals(input.former_last_name))
                ) && 
                (
                    this.dob == input.dob ||
                    (this.dob != null &&
                    this.dob.Equals(input.dob))
                ) && 
                (
                    this.year_code == input.year_code ||
                    (this.year_code != null &&
                    this.year_code.Equals(input.year_code))
                ) && 
                (
                    this.upn == input.upn ||
                    (this.upn != null &&
                    this.upn.Equals(input.upn))
                ) && 
                (
                    this.former_upn == input.former_upn ||
                    (this.former_upn != null &&
                    this.former_upn.Equals(input.former_upn))
                ) && 
                (
                    this.mis_id == input.mis_id ||
                    (this.mis_id != null &&
                    this.mis_id.Equals(input.mis_id))
                ) && 
                (
                    this.pan == input.pan ||
                    (this.pan != null &&
                    this.pan.Equals(input.pan))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.enrolment_status == input.enrolment_status ||
                    (this.enrolment_status != null &&
                    this.enrolment_status.Equals(input.enrolment_status))
                ) && 
                (
                    this.demographics == input.demographics ||
                    (this.demographics != null &&
                    this.demographics.Equals(input.demographics))
                ) && 
                (
                    this.contact == input.contact ||
                    this.contact != null &&
                    this.contact.SequenceEqual(input.contact)
                ) && 
                (
                    this.addresses == input.addresses ||
                    (this.addresses != null &&
                    this.addresses.Equals(input.addresses))
                ) && 
                (
                    this.languages == input.languages ||
                    (this.languages != null &&
                    this.languages.Equals(input.languages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.first_name != null)
                    hashCode = hashCode * 59 + this.first_name.GetHashCode();
                if (this.legal_first_name != null)
                    hashCode = hashCode * 59 + this.legal_first_name.GetHashCode();
                if (this.middle_name != null)
                    hashCode = hashCode * 59 + this.middle_name.GetHashCode();
                if (this.last_name != null)
                    hashCode = hashCode * 59 + this.last_name.GetHashCode();
                if (this.legal_last_name != null)
                    hashCode = hashCode * 59 + this.legal_last_name.GetHashCode();
                if (this.former_last_name != null)
                    hashCode = hashCode * 59 + this.former_last_name.GetHashCode();
                if (this.dob != null)
                    hashCode = hashCode * 59 + this.dob.GetHashCode();
                if (this.year_code != null)
                    hashCode = hashCode * 59 + this.year_code.GetHashCode();
                if (this.upn != null)
                    hashCode = hashCode * 59 + this.upn.GetHashCode();
                if (this.former_upn != null)
                    hashCode = hashCode * 59 + this.former_upn.GetHashCode();
                if (this.mis_id != null)
                    hashCode = hashCode * 59 + this.mis_id.GetHashCode();
                if (this.pan != null)
                    hashCode = hashCode * 59 + this.pan.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.enrolment_status != null)
                    hashCode = hashCode * 59 + this.enrolment_status.GetHashCode();
                if (this.demographics != null)
                    hashCode = hashCode * 59 + this.demographics.GetHashCode();
                if (this.contact != null)
                    hashCode = hashCode * 59 + this.contact.GetHashCode();
                if (this.addresses != null)
                    hashCode = hashCode * 59 + this.addresses.GetHashCode();
                if (this.languages != null)
                    hashCode = hashCode * 59 + this.languages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
