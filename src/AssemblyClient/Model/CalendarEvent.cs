/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// The calendar events object provides details of school events. This resource is currently only available for SIMS.
    /// </summary>
    [DataContract]
    public partial class CalendarEvent :  IEquatable<CalendarEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CalendarEvent" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all calendar events on the Platform.</param>
        /// <param name="name">This details the user-defined &#39;category&#39; that the event is assigned to on SIMS..</param>
        /// <param name="description">The name of the instance of the event, usually more detailed and specific than the &#39;name&#39;.</param>
        /// <param name="startDate">Date and time of when the event starts.</param>
        /// <param name="endDate">Date and time of when the event ends.</param>
        /// <param name="isActive">Whether the event is active or not.</param>
        /// <param name="isRecurrent">Whether the event recurs and (soon) details of recurrences.</param>
        /// <param name="misType">misType.</param>
        public CalendarEvent(string _object = default(string), int? id = default(int?), string name = default(string), string description = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), bool? isActive = default(bool?), bool? isRecurrent = default(bool?), CalendarEventMisType misType = default(CalendarEventMisType))
        {
            this._object = _object;
            this.id = id;
            this.name = name;
            this.description = description;
            this.start_date = startDate;
            this.end_date = endDate;
            this.is_active = isActive;
            this.is_recurrent = isRecurrent;
            this.mis_type = misType;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to all calendar events on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all calendar events on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// This details the user-defined &#39;category&#39; that the event is assigned to on SIMS.
        /// </summary>
        /// <value>This details the user-defined &#39;category&#39; that the event is assigned to on SIMS.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The name of the instance of the event, usually more detailed and specific than the &#39;name&#39;
        /// </summary>
        /// <value>The name of the instance of the event, usually more detailed and specific than the &#39;name&#39;</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Date and time of when the event starts
        /// </summary>
        /// <value>Date and time of when the event starts</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? start_date { get; set; }

        /// <summary>
        /// Date and time of when the event ends
        /// </summary>
        /// <value>Date and time of when the event ends</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? end_date { get; set; }

        /// <summary>
        /// Whether the event is active or not
        /// </summary>
        /// <value>Whether the event is active or not</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? is_active { get; set; }

        /// <summary>
        /// Whether the event recurs and (soon) details of recurrences
        /// </summary>
        /// <value>Whether the event recurs and (soon) details of recurrences</value>
        [DataMember(Name="is_recurrent", EmitDefaultValue=false)]
        public bool? is_recurrent { get; set; }

        /// <summary>
        /// Gets or Sets mis_type
        /// </summary>
        [DataMember(Name="mis_type", EmitDefaultValue=false)]
        public CalendarEventMisType mis_type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalendarEvent {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  is_active: ").Append(is_active).Append("\n");
            sb.Append("  is_recurrent: ").Append(is_recurrent).Append("\n");
            sb.Append("  mis_type: ").Append(mis_type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalendarEvent);
        }

        /// <summary>
        /// Returns true if CalendarEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of CalendarEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalendarEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.is_active == input.is_active ||
                    (this.is_active != null &&
                    this.is_active.Equals(input.is_active))
                ) && 
                (
                    this.is_recurrent == input.is_recurrent ||
                    (this.is_recurrent != null &&
                    this.is_recurrent.Equals(input.is_recurrent))
                ) && 
                (
                    this.mis_type == input.mis_type ||
                    (this.mis_type != null &&
                    this.mis_type.Equals(input.mis_type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.is_active != null)
                    hashCode = hashCode * 59 + this.is_active.GetHashCode();
                if (this.is_recurrent != null)
                    hashCode = hashCode * 59 + this.is_recurrent.GetHashCode();
                if (this.mis_type != null)
                    hashCode = hashCode * 59 + this.mis_type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
