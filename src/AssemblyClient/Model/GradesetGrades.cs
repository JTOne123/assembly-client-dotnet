/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// No description
    /// </summary>
    [DataContract]
    public partial class GradesetGrades :  IEquatable<GradesetGrades>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GradesetGrades" /> class.
        /// </summary>
        /// <param name="id">Internal stable ID given to all grades. Results should be written back to the Platform using the ID (as opposed to the &#39;name&#39;).</param>
        /// <param name="name">The name of the grade as a string.</param>
        /// <param name="value">The value of the grade as a number.</param>
        public GradesetGrades(int? id = default(int?), string name = default(string), float? value = default(float?))
        {
            this.id = id;
            this.name = name;
            this.value = value;
        }
        
        /// <summary>
        /// Internal stable ID given to all grades. Results should be written back to the Platform using the ID (as opposed to the &#39;name&#39;)
        /// </summary>
        /// <value>Internal stable ID given to all grades. Results should be written back to the Platform using the ID (as opposed to the &#39;name&#39;)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// The name of the grade as a string
        /// </summary>
        /// <value>The name of the grade as a string</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The value of the grade as a number
        /// </summary>
        /// <value>The value of the grade as a number</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GradesetGrades {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  value: ").Append(value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GradesetGrades);
        }

        /// <summary>
        /// Returns true if GradesetGrades instances are equal
        /// </summary>
        /// <param name="input">Instance of GradesetGrades to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GradesetGrades input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.value == input.value ||
                    (this.value != null &&
                    this.value.Equals(input.value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.value != null)
                    hashCode = hashCode * 59 + this.value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
