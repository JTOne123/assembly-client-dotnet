/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AssemblyClient.Client.OpenAPIDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// StaffMemberQualificationInfo
    /// </summary>
    [DataContract]
    public partial class StaffMemberQualificationInfo :  IEquatable<StaffMemberQualificationInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffMemberQualificationInfo" /> class.
        /// </summary>
        /// <param name="teacherNumber">teacherNumber.</param>
        /// <param name="qtStatus">qtStatus.</param>
        /// <param name="hltaStatus">hltaStatus.</param>
        /// <param name="qtsRoute">qtsRoute.</param>
        /// <param name="qualifications">qualifications.</param>
        public StaffMemberQualificationInfo(string teacherNumber = default(string), bool? qtStatus = default(bool?), bool? hltaStatus = default(bool?), string qtsRoute = default(string), List<StaffQualification> qualifications = default(List<StaffQualification>))
        {
            this.TeacherNumber = teacherNumber;
            this.QtStatus = qtStatus;
            this.HltaStatus = hltaStatus;
            this.QtsRoute = qtsRoute;
            this.Qualifications = qualifications;
        }
        
        /// <summary>
        /// Gets or Sets TeacherNumber
        /// </summary>
        [DataMember(Name="teacher_number", EmitDefaultValue=false)]
        public string TeacherNumber { get; set; }

        /// <summary>
        /// Gets or Sets QtStatus
        /// </summary>
        [DataMember(Name="qt_status", EmitDefaultValue=false)]
        public bool? QtStatus { get; set; }

        /// <summary>
        /// Gets or Sets HltaStatus
        /// </summary>
        [DataMember(Name="hlta_status", EmitDefaultValue=false)]
        public bool? HltaStatus { get; set; }

        /// <summary>
        /// Gets or Sets QtsRoute
        /// </summary>
        [DataMember(Name="qts_route", EmitDefaultValue=false)]
        public string QtsRoute { get; set; }

        /// <summary>
        /// Gets or Sets Qualifications
        /// </summary>
        [DataMember(Name="qualifications", EmitDefaultValue=false)]
        public List<StaffQualification> Qualifications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffMemberQualificationInfo {\n");
            sb.Append("  TeacherNumber: ").Append(TeacherNumber).Append("\n");
            sb.Append("  QtStatus: ").Append(QtStatus).Append("\n");
            sb.Append("  HltaStatus: ").Append(HltaStatus).Append("\n");
            sb.Append("  QtsRoute: ").Append(QtsRoute).Append("\n");
            sb.Append("  Qualifications: ").Append(Qualifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffMemberQualificationInfo);
        }

        /// <summary>
        /// Returns true if StaffMemberQualificationInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffMemberQualificationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffMemberQualificationInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeacherNumber == input.TeacherNumber ||
                    (this.TeacherNumber != null &&
                    this.TeacherNumber.Equals(input.TeacherNumber))
                ) && 
                (
                    this.QtStatus == input.QtStatus ||
                    (this.QtStatus != null &&
                    this.QtStatus.Equals(input.QtStatus))
                ) && 
                (
                    this.HltaStatus == input.HltaStatus ||
                    (this.HltaStatus != null &&
                    this.HltaStatus.Equals(input.HltaStatus))
                ) && 
                (
                    this.QtsRoute == input.QtsRoute ||
                    (this.QtsRoute != null &&
                    this.QtsRoute.Equals(input.QtsRoute))
                ) && 
                (
                    this.Qualifications == input.Qualifications ||
                    this.Qualifications != null &&
                    this.Qualifications.SequenceEqual(input.Qualifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeacherNumber != null)
                    hashCode = hashCode * 59 + this.TeacherNumber.GetHashCode();
                if (this.QtStatus != null)
                    hashCode = hashCode * 59 + this.QtStatus.GetHashCode();
                if (this.HltaStatus != null)
                    hashCode = hashCode * 59 + this.HltaStatus.GetHashCode();
                if (this.QtsRoute != null)
                    hashCode = hashCode * 59 + this.QtsRoute.GetHashCode();
                if (this.Qualifications != null)
                    hashCode = hashCode * 59 + this.Qualifications.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
