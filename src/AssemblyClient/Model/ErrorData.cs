/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// Rate limiting information
    /// </summary>
    [DataContract]
    public partial class ErrorData :  IEquatable<ErrorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorData" /> class.
        /// </summary>
        /// <param name="count">The number of requests you have made with the current token..</param>
        /// <param name="period">The number of seconds until the current token may make another request..</param>
        /// <param name="limit">The total number of requests the current token may make within a 5 minute window..</param>
        public ErrorData(int? count = default(int?), int? period = default(int?), int? limit = default(int?))
        {
            this.count = count;
            this.period = period;
            this.limit = limit;
        }
        
        /// <summary>
        /// The number of requests you have made with the current token.
        /// </summary>
        /// <value>The number of requests you have made with the current token.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? count { get; set; }

        /// <summary>
        /// The number of seconds until the current token may make another request.
        /// </summary>
        /// <value>The number of seconds until the current token may make another request.</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int? period { get; set; }

        /// <summary>
        /// The total number of requests the current token may make within a 5 minute window.
        /// </summary>
        /// <value>The total number of requests the current token may make within a 5 minute window.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorData {\n");
            sb.Append("  count: ").Append(count).Append("\n");
            sb.Append("  period: ").Append(period).Append("\n");
            sb.Append("  limit: ").Append(limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorData);
        }

        /// <summary>
        /// Returns true if ErrorData instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.count == input.count ||
                    (this.count != null &&
                    this.count.Equals(input.count))
                ) && 
                (
                    this.period == input.period ||
                    (this.period != null &&
                    this.period.Equals(input.period))
                ) && 
                (
                    this.limit == input.limit ||
                    (this.limit != null &&
                    this.limit.Equals(input.limit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.count != null)
                    hashCode = hashCode * 59 + this.count.GetHashCode();
                if (this.period != null)
                    hashCode = hashCode * 59 + this.period.GetHashCode();
                if (this.limit != null)
                    hashCode = hashCode * 59 + this.limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
