/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// The attendances resource details AM and PM roll call attendance marks for students.
    /// </summary>
    [DataContract]
    public partial class AttendanceListData :  IEquatable<AttendanceListData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttendanceListData" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="id">Internal stable ID given to all attendances on the Platform.</param>
        /// <param name="studentId">The ID of the student that the attendance is attached to.</param>
        /// <param name="registrationGroupId">The ID of the subject that the attendance is attached to.</param>
        /// <param name="sessionDate">The date of the attendance.</param>
        /// <param name="sessionName">Denotes whether the attendance is an AM session or PM session (morning or afternoon).</param>
        /// <param name="attendanceMark">The attendance mark.</param>
        /// <param name="minutesLate">If the attendance mark is &#39;L&#39; for &#39;Late&#39;, how many minutes late the student was.</param>
        /// <param name="comments">Any additional comments.</param>
        public AttendanceListData(string _object = default(string), int? id = default(int?), int? studentId = default(int?), int? registrationGroupId = default(int?), DateTime? sessionDate = default(DateTime?), string sessionName = default(string), string attendanceMark = default(string), int? minutesLate = default(int?), string comments = default(string))
        {
            this._object = _object;
            this.id = id;
            this.student_id = studentId;
            this.registration_group_id = registrationGroupId;
            this.session_date = sessionDate;
            this.session_name = sessionName;
            this.attendance_mark = attendanceMark;
            this.minutes_late = minutesLate;
            this.comments = comments;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// Internal stable ID given to all attendances on the Platform
        /// </summary>
        /// <value>Internal stable ID given to all attendances on the Platform</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? id { get; set; }

        /// <summary>
        /// The ID of the student that the attendance is attached to
        /// </summary>
        /// <value>The ID of the student that the attendance is attached to</value>
        [DataMember(Name="student_id", EmitDefaultValue=false)]
        public int? student_id { get; set; }

        /// <summary>
        /// The ID of the subject that the attendance is attached to
        /// </summary>
        /// <value>The ID of the subject that the attendance is attached to</value>
        [DataMember(Name="registration_group_id", EmitDefaultValue=false)]
        public int? registration_group_id { get; set; }

        /// <summary>
        /// The date of the attendance
        /// </summary>
        /// <value>The date of the attendance</value>
        [DataMember(Name="session_date", EmitDefaultValue=false)]
        public DateTime? session_date { get; set; }

        /// <summary>
        /// Denotes whether the attendance is an AM session or PM session (morning or afternoon)
        /// </summary>
        /// <value>Denotes whether the attendance is an AM session or PM session (morning or afternoon)</value>
        [DataMember(Name="session_name", EmitDefaultValue=false)]
        public string session_name { get; set; }

        /// <summary>
        /// The attendance mark
        /// </summary>
        /// <value>The attendance mark</value>
        [DataMember(Name="attendance_mark", EmitDefaultValue=false)]
        public string attendance_mark { get; set; }

        /// <summary>
        /// If the attendance mark is &#39;L&#39; for &#39;Late&#39;, how many minutes late the student was
        /// </summary>
        /// <value>If the attendance mark is &#39;L&#39; for &#39;Late&#39;, how many minutes late the student was</value>
        [DataMember(Name="minutes_late", EmitDefaultValue=false)]
        public int? minutes_late { get; set; }

        /// <summary>
        /// Any additional comments
        /// </summary>
        /// <value>Any additional comments</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttendanceListData {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  student_id: ").Append(student_id).Append("\n");
            sb.Append("  registration_group_id: ").Append(registration_group_id).Append("\n");
            sb.Append("  session_date: ").Append(session_date).Append("\n");
            sb.Append("  session_name: ").Append(session_name).Append("\n");
            sb.Append("  attendance_mark: ").Append(attendance_mark).Append("\n");
            sb.Append("  minutes_late: ").Append(minutes_late).Append("\n");
            sb.Append("  comments: ").Append(comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttendanceListData);
        }

        /// <summary>
        /// Returns true if AttendanceListData instances are equal
        /// </summary>
        /// <param name="input">Instance of AttendanceListData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttendanceListData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.id == input.id ||
                    (this.id != null &&
                    this.id.Equals(input.id))
                ) && 
                (
                    this.student_id == input.student_id ||
                    (this.student_id != null &&
                    this.student_id.Equals(input.student_id))
                ) && 
                (
                    this.registration_group_id == input.registration_group_id ||
                    (this.registration_group_id != null &&
                    this.registration_group_id.Equals(input.registration_group_id))
                ) && 
                (
                    this.session_date == input.session_date ||
                    (this.session_date != null &&
                    this.session_date.Equals(input.session_date))
                ) && 
                (
                    this.session_name == input.session_name ||
                    (this.session_name != null &&
                    this.session_name.Equals(input.session_name))
                ) && 
                (
                    this.attendance_mark == input.attendance_mark ||
                    (this.attendance_mark != null &&
                    this.attendance_mark.Equals(input.attendance_mark))
                ) && 
                (
                    this.minutes_late == input.minutes_late ||
                    (this.minutes_late != null &&
                    this.minutes_late.Equals(input.minutes_late))
                ) && 
                (
                    this.comments == input.comments ||
                    (this.comments != null &&
                    this.comments.Equals(input.comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.id != null)
                    hashCode = hashCode * 59 + this.id.GetHashCode();
                if (this.student_id != null)
                    hashCode = hashCode * 59 + this.student_id.GetHashCode();
                if (this.registration_group_id != null)
                    hashCode = hashCode * 59 + this.registration_group_id.GetHashCode();
                if (this.session_date != null)
                    hashCode = hashCode * 59 + this.session_date.GetHashCode();
                if (this.session_name != null)
                    hashCode = hashCode * 59 + this.session_name.GetHashCode();
                if (this.attendance_mark != null)
                    hashCode = hashCode * 59 + this.attendance_mark.GetHashCode();
                if (this.minutes_late != null)
                    hashCode = hashCode * 59 + this.minutes_late.GetHashCode();
                if (this.comments != null)
                    hashCode = hashCode * 59 + this.comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
