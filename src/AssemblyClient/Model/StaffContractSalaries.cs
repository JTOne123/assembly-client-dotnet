/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AssemblyClient.Client.SwaggerDateConverter;

namespace AssemblyClient.Model
{
    /// <summary>
    /// No description
    /// </summary>
    [DataContract]
    public partial class StaffContractSalaries :  IEquatable<StaffContractSalaries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaffContractSalaries" /> class.
        /// </summary>
        /// <param name="_object">Object type.</param>
        /// <param name="hoursPerWeek">No description.</param>
        /// <param name="fte">No description.</param>
        /// <param name="weeksPerYear">No description.</param>
        /// <param name="payRange">No description.</param>
        /// <param name="startDate">No description.</param>
        /// <param name="endDate">No description.</param>
        /// <param name="payScaleFramework">No description.</param>
        /// <param name="regionalSpine">No description.</param>
        /// <param name="basePay">No description.</param>
        /// <param name="actualPay">No description.</param>
        /// <param name="safeguardedSalary">No description.</param>
        public StaffContractSalaries(string _object = default(string), float? hoursPerWeek = default(float?), float? fte = default(float?), float? weeksPerYear = default(float?), string payRange = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string payScaleFramework = default(string), string regionalSpine = default(string), float? basePay = default(float?), float? actualPay = default(float?), bool? safeguardedSalary = default(bool?))
        {
            this._object = _object;
            this.hours_per_week = hoursPerWeek;
            this.fte = fte;
            this.weeks_per_year = weeksPerYear;
            this.pay_range = payRange;
            this.start_date = startDate;
            this.end_date = endDate;
            this.pay_scale_framework = payScaleFramework;
            this.regional_spine = regionalSpine;
            this.base_pay = basePay;
            this.actual_pay = actualPay;
            this.safeguarded_salary = safeguardedSalary;
        }
        
        /// <summary>
        /// Object type
        /// </summary>
        /// <value>Object type</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public string _object { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="hours_per_week", EmitDefaultValue=false)]
        public float? hours_per_week { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="fte", EmitDefaultValue=false)]
        public float? fte { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="weeks_per_year", EmitDefaultValue=false)]
        public float? weeks_per_year { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="pay_range", EmitDefaultValue=false)]
        public string pay_range { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? start_date { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? end_date { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="pay_scale_framework", EmitDefaultValue=false)]
        public string pay_scale_framework { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="regional_spine", EmitDefaultValue=false)]
        public string regional_spine { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="base_pay", EmitDefaultValue=false)]
        public float? base_pay { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="actual_pay", EmitDefaultValue=false)]
        public float? actual_pay { get; set; }

        /// <summary>
        /// No description
        /// </summary>
        /// <value>No description</value>
        [DataMember(Name="safeguarded_salary", EmitDefaultValue=false)]
        public bool? safeguarded_salary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaffContractSalaries {\n");
            sb.Append("  _object: ").Append(_object).Append("\n");
            sb.Append("  hours_per_week: ").Append(hours_per_week).Append("\n");
            sb.Append("  fte: ").Append(fte).Append("\n");
            sb.Append("  weeks_per_year: ").Append(weeks_per_year).Append("\n");
            sb.Append("  pay_range: ").Append(pay_range).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  pay_scale_framework: ").Append(pay_scale_framework).Append("\n");
            sb.Append("  regional_spine: ").Append(regional_spine).Append("\n");
            sb.Append("  base_pay: ").Append(base_pay).Append("\n");
            sb.Append("  actual_pay: ").Append(actual_pay).Append("\n");
            sb.Append("  safeguarded_salary: ").Append(safeguarded_salary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaffContractSalaries);
        }

        /// <summary>
        /// Returns true if StaffContractSalaries instances are equal
        /// </summary>
        /// <param name="input">Instance of StaffContractSalaries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaffContractSalaries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._object == input._object ||
                    (this._object != null &&
                    this._object.Equals(input._object))
                ) && 
                (
                    this.hours_per_week == input.hours_per_week ||
                    (this.hours_per_week != null &&
                    this.hours_per_week.Equals(input.hours_per_week))
                ) && 
                (
                    this.fte == input.fte ||
                    (this.fte != null &&
                    this.fte.Equals(input.fte))
                ) && 
                (
                    this.weeks_per_year == input.weeks_per_year ||
                    (this.weeks_per_year != null &&
                    this.weeks_per_year.Equals(input.weeks_per_year))
                ) && 
                (
                    this.pay_range == input.pay_range ||
                    (this.pay_range != null &&
                    this.pay_range.Equals(input.pay_range))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.pay_scale_framework == input.pay_scale_framework ||
                    (this.pay_scale_framework != null &&
                    this.pay_scale_framework.Equals(input.pay_scale_framework))
                ) && 
                (
                    this.regional_spine == input.regional_spine ||
                    (this.regional_spine != null &&
                    this.regional_spine.Equals(input.regional_spine))
                ) && 
                (
                    this.base_pay == input.base_pay ||
                    (this.base_pay != null &&
                    this.base_pay.Equals(input.base_pay))
                ) && 
                (
                    this.actual_pay == input.actual_pay ||
                    (this.actual_pay != null &&
                    this.actual_pay.Equals(input.actual_pay))
                ) && 
                (
                    this.safeguarded_salary == input.safeguarded_salary ||
                    (this.safeguarded_salary != null &&
                    this.safeguarded_salary.Equals(input.safeguarded_salary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._object != null)
                    hashCode = hashCode * 59 + this._object.GetHashCode();
                if (this.hours_per_week != null)
                    hashCode = hashCode * 59 + this.hours_per_week.GetHashCode();
                if (this.fte != null)
                    hashCode = hashCode * 59 + this.fte.GetHashCode();
                if (this.weeks_per_year != null)
                    hashCode = hashCode * 59 + this.weeks_per_year.GetHashCode();
                if (this.pay_range != null)
                    hashCode = hashCode * 59 + this.pay_range.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.pay_scale_framework != null)
                    hashCode = hashCode * 59 + this.pay_scale_framework.GetHashCode();
                if (this.regional_spine != null)
                    hashCode = hashCode * 59 + this.regional_spine.GetHashCode();
                if (this.base_pay != null)
                    hashCode = hashCode * 59 + this.base_pay.GetHashCode();
                if (this.actual_pay != null)
                    hashCode = hashCode * 59 + this.actual_pay.GetHashCode();
                if (this.safeguarded_salary != null)
                    hashCode = hashCode * 59 + this.safeguarded_salary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
