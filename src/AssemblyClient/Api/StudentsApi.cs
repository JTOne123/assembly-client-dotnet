/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AssemblyClient.Client;
using AssemblyClient.Model;

namespace AssemblyClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStudentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Left Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>StudentList</returns>
        StudentList LeftStudents (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Left Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of StudentList</returns>
        ApiResponse<StudentList> LeftStudentsWithHttpInfo (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null);
        /// <summary>
        /// View a Student
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Student</returns>
        Student Student (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);

        /// <summary>
        /// View a Student
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>ApiResponse of Student</returns>
        ApiResponse<Student> StudentWithHttpInfo (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);
        /// <summary>
        /// List Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>StudentList</returns>
        StudentList Students (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of StudentList</returns>
        ApiResponse<StudentList> StudentsWithHttpInfo (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Left Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of StudentList</returns>
        System.Threading.Tasks.Task<StudentList> LeftStudentsAsync (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Left Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentList>> LeftStudentsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null);
        /// <summary>
        /// View a Student
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of Student</returns>
        System.Threading.Tasks.Task<Student> StudentAsync (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);

        /// <summary>
        /// View a Student
        /// </summary>
        /// <remarks>
        /// Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of ApiResponse (Student)</returns>
        System.Threading.Tasks.Task<ApiResponse<Student>> StudentAsyncWithHttpInfo (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);
        /// <summary>
        /// List Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of StudentList</returns>
        System.Threading.Tasks.Task<StudentList> StudentsAsync (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Students
        /// </summary>
        /// <remarks>
        /// Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentList>> StudentsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StudentsApi : IStudentsApi
    {
        private AssemblyClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StudentsApi(String basePath)
        {
            this.Configuration = new AssemblyClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StudentsApi(AssemblyClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AssemblyClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AssemblyClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AssemblyClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Left Students Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>StudentList</returns>
        public StudentList LeftStudents (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null)
        {
             ApiResponse<StudentList> localVarResponse = LeftStudentsWithHttpInfo(ifModifiedSince, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Left Students Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of StudentList</returns>
        public ApiResponse< StudentList > LeftStudentsWithHttpInfo (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/students/left";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeftStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        /// List Left Students Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of StudentList</returns>
        public async System.Threading.Tasks.Task<StudentList> LeftStudentsAsync (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null)
        {
             ApiResponse<StudentList> localVarResponse = await LeftStudentsAsyncWithHttpInfo(ifModifiedSince, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Left Students Returns a list of students who have left the school.&lt;br&gt;&lt;br&gt;**Note:** This will include any students who have left the school during the current academic year. If the school has been connected to Assembly for more than one academic year, all left students will be returned. The &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentList>> LeftStudentsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/students/left";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeftStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        /// View a Student Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Student</returns>
        public Student Student (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
             ApiResponse<Student> localVarResponse = StudentWithHttpInfo(demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a Student Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>ApiResponse of Student</returns>
        public ApiResponse< Student > StudentWithHttpInfo (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {

            var localVarPath = "/students/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Student", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Student>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Student) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Student)));
        }

        /// <summary>
        /// View a Student Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of Student</returns>
        public async System.Threading.Tasks.Task<Student> StudentAsync (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
             ApiResponse<Student> localVarResponse = await StudentAsyncWithHttpInfo(demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a Student Returns an individual student record for the given ID.  **Note:** the response shown includes student demographics, contacts, student SEN needs, student addresses, photo and student care data but these will only be present if you have permission to access it and pass &#x60;demographics&#x60;, &#x60;contacts&#x60;, &#x60;sen_needs&#x60;, &#x60;addresses&#x60;, &#x60;photo&#x60;, &#x60;care&#x60; and &#x60;ever_in_care&#x60; respectively  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details).  ### Photo Notes When requesting photo information the response includes a &#x60;photo.url&#x60; property, this URL should be treated as confidential and used to download the students photo to your storage system of choice. The URL is *not designed for hotlinking directly in the browser* for end users. URLs are signed and only valid for 1 hour after which time you will receive a 400 error.  Once downloaded to avoid repeatedly syncing unchanged photos you should code your application to compare the &#x60;photo.hash&#x60; property to detect changes in student photos since your last sync, it is guaranteed that changes in a photo will change the hash, however the hash is only intended to be used to detect photo changes and is not guaranteed to match a checksum of the files contents.  Photos are currently provided on an \&quot;as is\&quot; basis straight from the source MIS, this means the format, quality, metadata and dimensions are not guaranteed. We reserve the right to normalise this data in the future but your application should be resistant to differing photo formats. 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of ApiResponse (Student)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Student>> StudentAsyncWithHttpInfo (bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {

            var localVarPath = "/students/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Student", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Student>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Student) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Student)));
        }

        /// <summary>
        /// List Students Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>StudentList</returns>
        public StudentList Students (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null)
        {
             ApiResponse<StudentList> localVarResponse = StudentsWithHttpInfo(ifModifiedSince, students, date, yearCode, demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Students Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of StudentList</returns>
        public ApiResponse< StudentList > StudentsWithHttpInfo (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "students[]", students)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Students", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        /// List Students Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of StudentList</returns>
        public async System.Threading.Tasks.Task<StudentList> StudentsAsync (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null)
        {
             ApiResponse<StudentList> localVarResponse = await StudentsAsyncWithHttpInfo(ifModifiedSince, students, date, yearCode, demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Students Returns a list of students for the school associated with the provided &#x60;access_token.&#x60; **Note:** the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](https://developers.assembly.education/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="students">ID(s) of the student(s) as an Integer. Multiple IDs can be separated with a space (so a + URL encoded). (optional)</param>
        /// <param name="date">returns students for a specific date (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentList>> StudentsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, List<int?> students = null, DateTime? date = null, int? yearCode = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (students != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "students[]", students)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Students", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

    }
}
