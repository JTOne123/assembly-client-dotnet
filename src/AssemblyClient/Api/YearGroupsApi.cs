/* 
 * assembly.education
 *
 * Developer API for assembly.education.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AssemblyClient.Client;
using AssemblyClient.Model;

namespace AssemblyClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IYearGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>YearGroupList</returns>
        YearGroupList YearGroups (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of YearGroupList</returns>
        ApiResponse<YearGroupList> YearGroupsWithHttpInfo (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>YearGroup</returns>
        YearGroup YearGroupsGroupId (string groupId, string date = null, int? academicYearId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>ApiResponse of YearGroup</returns>
        ApiResponse<YearGroup> YearGroupsGroupIdWithHttpInfo (string groupId, string date = null, int? academicYearId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the year group identified by year_code.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>StudentList</returns>
        StudentList YearGroupsGroupIdStudents (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the year group identified by year_code.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        ApiResponse<StudentList> YearGroupsGroupIdStudentsWithHttpInfo (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of YearGroupList</returns>
        System.Threading.Tasks.Task<YearGroupList> YearGroupsAsync (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (YearGroupList)</returns>
        System.Threading.Tasks.Task<ApiResponse<YearGroupList>> YearGroupsAsyncWithHttpInfo (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>Task of YearGroup</returns>
        System.Threading.Tasks.Task<YearGroup> YearGroupsGroupIdAsync (string groupId, string date = null, int? academicYearId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>Task of ApiResponse (YearGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<YearGroup>> YearGroupsGroupIdAsyncWithHttpInfo (string groupId, string date = null, int? academicYearId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the year group identified by year_code.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of StudentList</returns>
        System.Threading.Tasks.Task<StudentList> YearGroupsGroupIdStudentsAsync (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the year group identified by year_code.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentList>> YearGroupsGroupIdStudentsAsyncWithHttpInfo (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class YearGroupsApi : IYearGroupsApi
    {
        private AssemblyClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="YearGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public YearGroupsApi(String basePath)
        {
            this.Configuration = new AssemblyClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="YearGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public YearGroupsApi(AssemblyClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AssemblyClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AssemblyClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AssemblyClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>YearGroupList</returns>
        public YearGroupList YearGroups (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<YearGroupList> localVarResponse = YearGroupsWithHttpInfo(yearCode, date, academicYearId, page, perPage, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of YearGroupList</returns>
        public ApiResponse< YearGroupList > YearGroupsWithHttpInfo (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {

            var localVarPath = "/year_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YearGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YearGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YearGroupList)));
        }

        /// <summary>
        ///  Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of YearGroupList</returns>
        public async System.Threading.Tasks.Task<YearGroupList> YearGroupsAsync (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<YearGroupList> localVarResponse = await YearGroupsAsyncWithHttpInfo(yearCode, date, academicYearId, page, perPage, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of year groups that match the given set of filters. The default behaviour is to return the year groups for the school&#39;s current academic year.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="yearCode">Filter by a specific NC year code (optional)</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (YearGroupList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<YearGroupList>> YearGroupsAsyncWithHttpInfo (string yearCode = null, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {

            var localVarPath = "/year_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YearGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YearGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YearGroupList)));
        }

        /// <summary>
        ///  Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>YearGroup</returns>
        public YearGroup YearGroupsGroupId (string groupId, string date = null, int? academicYearId = null)
        {
             ApiResponse<YearGroup> localVarResponse = YearGroupsGroupIdWithHttpInfo(groupId, date, academicYearId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>ApiResponse of YearGroup</returns>
        public ApiResponse< YearGroup > YearGroupsGroupIdWithHttpInfo (string groupId, string date = null, int? academicYearId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling YearGroupsApi->YearGroupsGroupId");

            var localVarPath = "/year_groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YearGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YearGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YearGroup)));
        }

        /// <summary>
        ///  Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>Task of YearGroup</returns>
        public async System.Threading.Tasks.Task<YearGroup> YearGroupsGroupIdAsync (string groupId, string date = null, int? academicYearId = null)
        {
             ApiResponse<YearGroup> localVarResponse = await YearGroupsGroupIdAsyncWithHttpInfo(groupId, date, academicYearId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a single year group whose code matches the provided year_code. Additionally includes a list of all the student identifiers that are present in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <returns>Task of ApiResponse (YearGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<YearGroup>> YearGroupsGroupIdAsyncWithHttpInfo (string groupId, string date = null, int? academicYearId = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling YearGroupsApi->YearGroupsGroupId");

            var localVarPath = "/year_groups/{group_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroupsGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<YearGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (YearGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(YearGroup)));
        }

        /// <summary>
        ///  Returns a list of all the students that are present in the year group identified by year_code.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>StudentList</returns>
        public StudentList YearGroupsGroupIdStudents (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<StudentList> localVarResponse = YearGroupsGroupIdStudentsWithHttpInfo(groupId, date, academicYearId, page, perPage, ifModifiedSince);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all the students that are present in the year group identified by year_code.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        public ApiResponse< StudentList > YearGroupsGroupIdStudentsWithHttpInfo (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling YearGroupsApi->YearGroupsGroupIdStudents");

            var localVarPath = "/year_groups/{group_id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroupsGroupIdStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        ///  Returns a list of all the students that are present in the year group identified by year_code.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of StudentList</returns>
        public async System.Threading.Tasks.Task<StudentList> YearGroupsGroupIdStudentsAsync (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
             ApiResponse<StudentList> localVarResponse = await YearGroupsGroupIdStudentsAsyncWithHttpInfo(groupId, date, academicYearId, page, perPage, ifModifiedSince);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all the students that are present in the year group identified by year_code.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the Year Group as an Integer</param>
        /// <param name="date">Filter for a specific date (optional)</param>
        /// <param name="academicYearId">Filter based on the specified academic year (optional)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="ifModifiedSince">Timestamp of the last response. (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentList>> YearGroupsGroupIdStudentsAsyncWithHttpInfo (string groupId, string date = null, int? academicYearId = null, int? page = null, int? perPage = null, string ifModifiedSince = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling YearGroupsApi->YearGroupsGroupIdStudents");

            var localVarPath = "/year_groups/{group_id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("group_id", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("YearGroupsGroupIdStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

    }
}
