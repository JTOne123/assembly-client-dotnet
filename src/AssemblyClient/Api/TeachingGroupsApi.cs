/* 
 * Assembly Developer API
 *
 * The Assembly API is built around the REST and a collection of open standards/protocols in order to comply with as many consumers as possible.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@assembly.education
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AssemblyClient.Client;
using AssemblyClient.Model;

namespace AssemblyClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeachingGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View a Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>TeachingGroup</returns>
        TeachingGroup TeachingGroup (int? id, DateTime? date = null, int? academicYearId = null);

        /// <summary>
        /// View a Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>ApiResponse of TeachingGroup</returns>
        ApiResponse<TeachingGroup> TeachingGroupWithHttpInfo (int? id, DateTime? date = null, int? academicYearId = null);
        /// <summary>
        /// List Students for Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>StudentList</returns>
        StudentList TeachingGroupStudents (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);

        /// <summary>
        /// List Students for Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        ApiResponse<StudentList> TeachingGroupStudentsWithHttpInfo (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);
        /// <summary>
        /// List Teaching Groups
        /// </summary>
        /// <remarks>
        /// Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>TeachingGroupList</returns>
        TeachingGroupList TeachingGroups (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Teaching Groups
        /// </summary>
        /// <remarks>
        /// Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of TeachingGroupList</returns>
        ApiResponse<TeachingGroupList> TeachingGroupsWithHttpInfo (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// View a Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>Task of TeachingGroup</returns>
        System.Threading.Tasks.Task<TeachingGroup> TeachingGroupAsync (int? id, DateTime? date = null, int? academicYearId = null);

        /// <summary>
        /// View a Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>Task of ApiResponse (TeachingGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachingGroup>> TeachingGroupAsyncWithHttpInfo (int? id, DateTime? date = null, int? academicYearId = null);
        /// <summary>
        /// List Students for Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of StudentList</returns>
        System.Threading.Tasks.Task<StudentList> TeachingGroupStudentsAsync (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);

        /// <summary>
        /// List Students for Teaching Group
        /// </summary>
        /// <remarks>
        /// Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<StudentList>> TeachingGroupStudentsAsyncWithHttpInfo (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null);
        /// <summary>
        /// List Teaching Groups
        /// </summary>
        /// <remarks>
        /// Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of TeachingGroupList</returns>
        System.Threading.Tasks.Task<TeachingGroupList> TeachingGroupsAsync (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null);

        /// <summary>
        /// List Teaching Groups
        /// </summary>
        /// <remarks>
        /// Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </remarks>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (TeachingGroupList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeachingGroupList>> TeachingGroupsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeachingGroupsApi : ITeachingGroupsApi
    {
        private AssemblyClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeachingGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeachingGroupsApi(String basePath)
        {
            this.Configuration = new AssemblyClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeachingGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeachingGroupsApi(AssemblyClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AssemblyClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AssemblyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AssemblyClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AssemblyClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// View a Teaching Group Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>TeachingGroup</returns>
        public TeachingGroup TeachingGroup (int? id, DateTime? date = null, int? academicYearId = null)
        {
             ApiResponse<TeachingGroup> localVarResponse = TeachingGroupWithHttpInfo(id, date, academicYearId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a Teaching Group Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>ApiResponse of TeachingGroup</returns>
        public ApiResponse< TeachingGroup > TeachingGroupWithHttpInfo (int? id, DateTime? date = null, int? academicYearId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeachingGroupsApi->TeachingGroup");

            var localVarPath = "/teaching_groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachingGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachingGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachingGroup)));
        }

        /// <summary>
        /// View a Teaching Group Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>Task of TeachingGroup</returns>
        public async System.Threading.Tasks.Task<TeachingGroup> TeachingGroupAsync (int? id, DateTime? date = null, int? academicYearId = null)
        {
             ApiResponse<TeachingGroup> localVarResponse = await TeachingGroupAsyncWithHttpInfo(id, date, academicYearId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a Teaching Group Returns a single teaching group whose ID matches the provided group_id. Additionally includes a list of all the student and supervisor identifiers that have ever been enrolled in the group.
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <returns>Task of ApiResponse (TeachingGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachingGroup>> TeachingGroupAsyncWithHttpInfo (int? id, DateTime? date = null, int? academicYearId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeachingGroupsApi->TeachingGroup");

            var localVarPath = "/teaching_groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachingGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachingGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachingGroup)));
        }

        /// <summary>
        /// List Students for Teaching Group Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>StudentList</returns>
        public StudentList TeachingGroupStudents (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
             ApiResponse<StudentList> localVarResponse = TeachingGroupStudentsWithHttpInfo(id, ifModifiedSince, demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Students for Teaching Group Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>ApiResponse of StudentList</returns>
        public ApiResponse< StudentList > TeachingGroupStudentsWithHttpInfo (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeachingGroupsApi->TeachingGroupStudents");

            var localVarPath = "/teaching_groups/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroupStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        /// List Students for Teaching Group Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of StudentList</returns>
        public async System.Threading.Tasks.Task<StudentList> TeachingGroupStudentsAsync (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
             ApiResponse<StudentList> localVarResponse = await TeachingGroupStudentsAsyncWithHttpInfo(id, ifModifiedSince, demographics, contacts, senNeeds, addresses, care, everInCare, languages, photo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Students for Teaching Group Returns a list of all the students that are present in the teaching group identified by group_id.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the entity</param>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="demographics">include demographics data (optional)</param>
        /// <param name="contacts">include contacts data (optional)</param>
        /// <param name="senNeeds">include SEN needs data (optional)</param>
        /// <param name="addresses">include student address data (optional)</param>
        /// <param name="care">include student care data (you must also supply the demographics parameter) (optional)</param>
        /// <param name="everInCare">include whether the student has ever been in care (you must also supply the demographics parameter) (optional)</param>
        /// <param name="languages">include student language data (optional)</param>
        /// <param name="photo">include student photo data (optional)</param>
        /// <returns>Task of ApiResponse (StudentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StudentList>> TeachingGroupStudentsAsyncWithHttpInfo (int? id, DateTime? ifModifiedSince = null, bool? demographics = null, bool? contacts = null, bool? senNeeds = null, bool? addresses = null, bool? care = null, bool? everInCare = null, bool? languages = null, bool? photo = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TeachingGroupsApi->TeachingGroupStudents");

            var localVarPath = "/teaching_groups/{id}/students";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (demographics != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "demographics", demographics)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (senNeeds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sen_needs", senNeeds)); // query parameter
            if (addresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addresses", addresses)); // query parameter
            if (care != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "care", care)); // query parameter
            if (everInCare != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ever_in_care", everInCare)); // query parameter
            if (languages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "languages", languages)); // query parameter
            if (photo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "photo", photo)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroupStudents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StudentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StudentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StudentList)));
        }

        /// <summary>
        /// List Teaching Groups Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>TeachingGroupList</returns>
        public TeachingGroupList TeachingGroups (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null)
        {
             ApiResponse<TeachingGroupList> localVarResponse = TeachingGroupsWithHttpInfo(ifModifiedSince, subjectCode, yearCode, date, academicYearId, perPage, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Teaching Groups Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>ApiResponse of TeachingGroupList</returns>
        public ApiResponse< TeachingGroupList > TeachingGroupsWithHttpInfo (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/teaching_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subjectCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject_code", subjectCode)); // query parameter
            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachingGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachingGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachingGroupList)));
        }

        /// <summary>
        /// List Teaching Groups Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of TeachingGroupList</returns>
        public async System.Threading.Tasks.Task<TeachingGroupList> TeachingGroupsAsync (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null)
        {
             ApiResponse<TeachingGroupList> localVarResponse = await TeachingGroupsAsyncWithHttpInfo(ifModifiedSince, subjectCode, yearCode, date, academicYearId, perPage, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Teaching Groups Returns a list of teaching groups that match the given set of filters.  If a date parameter is provided then the list of groups returned is filtered to only those where the provided date falls between the groups start_date and end_date. Additionally when a date parameter is provided student_ids and supervior_ids are restricted to only those students who were enrolled in the group on the given date.  **Note:** Note the &#x60;If-Modified-Since&#x60; header is optional (see the page on [Conditional Requests](/api#conditional-requests) for more details). 
        /// </summary>
        /// <exception cref="AssemblyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifModifiedSince">If-Modified-Since is optional (see the page on Conditional Requests for more details). (optional)</param>
        /// <param name="subjectCode">filter by subject (optional)</param>
        /// <param name="yearCode">filter by school year (cannot be supplied at the same time as the students parameter) (optional)</param>
        /// <param name="date">returns results for a specific date (optional)</param>
        /// <param name="academicYearId">returns all groups and group memberships from the specified academic year (optional)</param>
        /// <param name="perPage">Number of results to return (optional, default to 100)</param>
        /// <param name="page">Page number to return (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (TeachingGroupList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeachingGroupList>> TeachingGroupsAsyncWithHttpInfo (DateTime? ifModifiedSince = null, string subjectCode = null, int? yearCode = null, DateTime? date = null, int? academicYearId = null, int? perPage = null, int? page = null)
        {

            var localVarPath = "/teaching_groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/vnd.assembly+json; version=1"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subjectCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject_code", subjectCode)); // query parameter
            if (yearCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "year_code", yearCode)); // query parameter
            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (academicYearId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "academic_year_id", academicYearId)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (ifModifiedSince != null) localVarHeaderParams.Add("If-Modified-Since", this.Configuration.ApiClient.ParameterToString(ifModifiedSince)); // header parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TeachingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeachingGroupList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeachingGroupList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeachingGroupList)));
        }

    }
}
